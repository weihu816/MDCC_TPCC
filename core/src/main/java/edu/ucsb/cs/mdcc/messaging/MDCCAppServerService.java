/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package edu.ucsb.cs.mdcc.messaging;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class MDCCAppServerService {

  public interface Iface {

    public boolean ping() throws org.apache.thrift.TException;

    public edu.ucsb.cs.mdcc.messaging.ReadValue read(String key) throws org.apache.thrift.TException;

    public Map<String,edu.ucsb.cs.mdcc.messaging.ReadValue> read2(String table, String key, List<String> columns) throws org.apache.thrift.TException;

    public List<Map<String,edu.ucsb.cs.mdcc.messaging.ReadValue>> read3(String table, String key_prefix, List<String> columns, String constraintColumn, String constraintValue, String orderColumn, boolean isAssending) throws org.apache.thrift.TException;

    public List<edu.ucsb.cs.mdcc.messaging.ReadValue> read4(String table, String key_prefix, String projectionColumn, String constraintColumn, int lowerBound, int upperBound) throws org.apache.thrift.TException;

    public int read5(String table, String key_prefix, String constraintColumn, int lowerBound, int upperBound) throws org.apache.thrift.TException;

    public boolean commit(String transactionId, List<edu.ucsb.cs.mdcc.messaging.Option> options) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void ping(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void read(String key, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void read2(String table, String key, List<String> columns, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void read3(String table, String key_prefix, List<String> columns, String constraintColumn, String constraintValue, String orderColumn, boolean isAssending, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void read4(String table, String key_prefix, String projectionColumn, String constraintColumn, int lowerBound, int upperBound, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void read5(String table, String key_prefix, String constraintColumn, int lowerBound, int upperBound, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void commit(String transactionId, List<edu.ucsb.cs.mdcc.messaging.Option> options, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public boolean ping() throws org.apache.thrift.TException
    {
      send_ping();
      return recv_ping();
    }

    public void send_ping() throws org.apache.thrift.TException
    {
      ping_args args = new ping_args();
      sendBase("ping", args);
    }

    public boolean recv_ping() throws org.apache.thrift.TException
    {
      ping_result result = new ping_result();
      receiveBase(result, "ping");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "ping failed: unknown result");
    }

    public edu.ucsb.cs.mdcc.messaging.ReadValue read(String key) throws org.apache.thrift.TException
    {
      send_read(key);
      return recv_read();
    }

    public void send_read(String key) throws org.apache.thrift.TException
    {
      read_args args = new read_args();
      args.setKey(key);
      sendBase("read", args);
    }

    public edu.ucsb.cs.mdcc.messaging.ReadValue recv_read() throws org.apache.thrift.TException
    {
      read_result result = new read_result();
      receiveBase(result, "read");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "read failed: unknown result");
    }

    public Map<String,edu.ucsb.cs.mdcc.messaging.ReadValue> read2(String table, String key, List<String> columns) throws org.apache.thrift.TException
    {
      send_read2(table, key, columns);
      return recv_read2();
    }

    public void send_read2(String table, String key, List<String> columns) throws org.apache.thrift.TException
    {
      read2_args args = new read2_args();
      args.setTable(table);
      args.setKey(key);
      args.setColumns(columns);
      sendBase("read2", args);
    }

    public Map<String,edu.ucsb.cs.mdcc.messaging.ReadValue> recv_read2() throws org.apache.thrift.TException
    {
      read2_result result = new read2_result();
      receiveBase(result, "read2");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "read2 failed: unknown result");
    }

    public List<Map<String,edu.ucsb.cs.mdcc.messaging.ReadValue>> read3(String table, String key_prefix, List<String> columns, String constraintColumn, String constraintValue, String orderColumn, boolean isAssending) throws org.apache.thrift.TException
    {
      send_read3(table, key_prefix, columns, constraintColumn, constraintValue, orderColumn, isAssending);
      return recv_read3();
    }

    public void send_read3(String table, String key_prefix, List<String> columns, String constraintColumn, String constraintValue, String orderColumn, boolean isAssending) throws org.apache.thrift.TException
    {
      read3_args args = new read3_args();
      args.setTable(table);
      args.setKey_prefix(key_prefix);
      args.setColumns(columns);
      args.setConstraintColumn(constraintColumn);
      args.setConstraintValue(constraintValue);
      args.setOrderColumn(orderColumn);
      args.setIsAssending(isAssending);
      sendBase("read3", args);
    }

    public List<Map<String,edu.ucsb.cs.mdcc.messaging.ReadValue>> recv_read3() throws org.apache.thrift.TException
    {
      read3_result result = new read3_result();
      receiveBase(result, "read3");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "read3 failed: unknown result");
    }

    public List<edu.ucsb.cs.mdcc.messaging.ReadValue> read4(String table, String key_prefix, String projectionColumn, String constraintColumn, int lowerBound, int upperBound) throws org.apache.thrift.TException
    {
      send_read4(table, key_prefix, projectionColumn, constraintColumn, lowerBound, upperBound);
      return recv_read4();
    }

    public void send_read4(String table, String key_prefix, String projectionColumn, String constraintColumn, int lowerBound, int upperBound) throws org.apache.thrift.TException
    {
      read4_args args = new read4_args();
      args.setTable(table);
      args.setKey_prefix(key_prefix);
      args.setProjectionColumn(projectionColumn);
      args.setConstraintColumn(constraintColumn);
      args.setLowerBound(lowerBound);
      args.setUpperBound(upperBound);
      sendBase("read4", args);
    }

    public List<edu.ucsb.cs.mdcc.messaging.ReadValue> recv_read4() throws org.apache.thrift.TException
    {
      read4_result result = new read4_result();
      receiveBase(result, "read4");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "read4 failed: unknown result");
    }

    public int read5(String table, String key_prefix, String constraintColumn, int lowerBound, int upperBound) throws org.apache.thrift.TException
    {
      send_read5(table, key_prefix, constraintColumn, lowerBound, upperBound);
      return recv_read5();
    }

    public void send_read5(String table, String key_prefix, String constraintColumn, int lowerBound, int upperBound) throws org.apache.thrift.TException
    {
      read5_args args = new read5_args();
      args.setTable(table);
      args.setKey_prefix(key_prefix);
      args.setConstraintColumn(constraintColumn);
      args.setLowerBound(lowerBound);
      args.setUpperBound(upperBound);
      sendBase("read5", args);
    }

    public int recv_read5() throws org.apache.thrift.TException
    {
      read5_result result = new read5_result();
      receiveBase(result, "read5");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "read5 failed: unknown result");
    }

    public boolean commit(String transactionId, List<edu.ucsb.cs.mdcc.messaging.Option> options) throws org.apache.thrift.TException
    {
      send_commit(transactionId, options);
      return recv_commit();
    }

    public void send_commit(String transactionId, List<edu.ucsb.cs.mdcc.messaging.Option> options) throws org.apache.thrift.TException
    {
      commit_args args = new commit_args();
      args.setTransactionId(transactionId);
      args.setOptions(options);
      sendBase("commit", args);
    }

    public boolean recv_commit() throws org.apache.thrift.TException
    {
      commit_result result = new commit_result();
      receiveBase(result, "commit");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "commit failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void ping(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      ping_call method_call = new ping_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class ping_call extends org.apache.thrift.async.TAsyncMethodCall {
      public ping_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("ping", org.apache.thrift.protocol.TMessageType.CALL, 0));
        ping_args args = new ping_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_ping();
      }
    }

    public void read(String key, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      read_call method_call = new read_call(key, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class read_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String key;
      public read_call(String key, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.key = key;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("read", org.apache.thrift.protocol.TMessageType.CALL, 0));
        read_args args = new read_args();
        args.setKey(key);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public edu.ucsb.cs.mdcc.messaging.ReadValue getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_read();
      }
    }

    public void read2(String table, String key, List<String> columns, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      read2_call method_call = new read2_call(table, key, columns, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class read2_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String table;
      private String key;
      private List<String> columns;
      public read2_call(String table, String key, List<String> columns, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.table = table;
        this.key = key;
        this.columns = columns;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("read2", org.apache.thrift.protocol.TMessageType.CALL, 0));
        read2_args args = new read2_args();
        args.setTable(table);
        args.setKey(key);
        args.setColumns(columns);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Map<String,edu.ucsb.cs.mdcc.messaging.ReadValue> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_read2();
      }
    }

    public void read3(String table, String key_prefix, List<String> columns, String constraintColumn, String constraintValue, String orderColumn, boolean isAssending, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      read3_call method_call = new read3_call(table, key_prefix, columns, constraintColumn, constraintValue, orderColumn, isAssending, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class read3_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String table;
      private String key_prefix;
      private List<String> columns;
      private String constraintColumn;
      private String constraintValue;
      private String orderColumn;
      private boolean isAssending;
      public read3_call(String table, String key_prefix, List<String> columns, String constraintColumn, String constraintValue, String orderColumn, boolean isAssending, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.table = table;
        this.key_prefix = key_prefix;
        this.columns = columns;
        this.constraintColumn = constraintColumn;
        this.constraintValue = constraintValue;
        this.orderColumn = orderColumn;
        this.isAssending = isAssending;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("read3", org.apache.thrift.protocol.TMessageType.CALL, 0));
        read3_args args = new read3_args();
        args.setTable(table);
        args.setKey_prefix(key_prefix);
        args.setColumns(columns);
        args.setConstraintColumn(constraintColumn);
        args.setConstraintValue(constraintValue);
        args.setOrderColumn(orderColumn);
        args.setIsAssending(isAssending);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Map<String,edu.ucsb.cs.mdcc.messaging.ReadValue>> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_read3();
      }
    }

    public void read4(String table, String key_prefix, String projectionColumn, String constraintColumn, int lowerBound, int upperBound, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      read4_call method_call = new read4_call(table, key_prefix, projectionColumn, constraintColumn, lowerBound, upperBound, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class read4_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String table;
      private String key_prefix;
      private String projectionColumn;
      private String constraintColumn;
      private int lowerBound;
      private int upperBound;
      public read4_call(String table, String key_prefix, String projectionColumn, String constraintColumn, int lowerBound, int upperBound, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.table = table;
        this.key_prefix = key_prefix;
        this.projectionColumn = projectionColumn;
        this.constraintColumn = constraintColumn;
        this.lowerBound = lowerBound;
        this.upperBound = upperBound;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("read4", org.apache.thrift.protocol.TMessageType.CALL, 0));
        read4_args args = new read4_args();
        args.setTable(table);
        args.setKey_prefix(key_prefix);
        args.setProjectionColumn(projectionColumn);
        args.setConstraintColumn(constraintColumn);
        args.setLowerBound(lowerBound);
        args.setUpperBound(upperBound);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<edu.ucsb.cs.mdcc.messaging.ReadValue> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_read4();
      }
    }

    public void read5(String table, String key_prefix, String constraintColumn, int lowerBound, int upperBound, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      read5_call method_call = new read5_call(table, key_prefix, constraintColumn, lowerBound, upperBound, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class read5_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String table;
      private String key_prefix;
      private String constraintColumn;
      private int lowerBound;
      private int upperBound;
      public read5_call(String table, String key_prefix, String constraintColumn, int lowerBound, int upperBound, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.table = table;
        this.key_prefix = key_prefix;
        this.constraintColumn = constraintColumn;
        this.lowerBound = lowerBound;
        this.upperBound = upperBound;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("read5", org.apache.thrift.protocol.TMessageType.CALL, 0));
        read5_args args = new read5_args();
        args.setTable(table);
        args.setKey_prefix(key_prefix);
        args.setConstraintColumn(constraintColumn);
        args.setLowerBound(lowerBound);
        args.setUpperBound(upperBound);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_read5();
      }
    }

    public void commit(String transactionId, List<edu.ucsb.cs.mdcc.messaging.Option> options, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      commit_call method_call = new commit_call(transactionId, options, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class commit_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String transactionId;
      private List<edu.ucsb.cs.mdcc.messaging.Option> options;
      public commit_call(String transactionId, List<edu.ucsb.cs.mdcc.messaging.Option> options, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.transactionId = transactionId;
        this.options = options;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("commit", org.apache.thrift.protocol.TMessageType.CALL, 0));
        commit_args args = new commit_args();
        args.setTransactionId(transactionId);
        args.setOptions(options);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_commit();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("ping", new ping());
      processMap.put("read", new read());
      processMap.put("read2", new read2());
      processMap.put("read3", new read3());
      processMap.put("read4", new read4());
      processMap.put("read5", new read5());
      processMap.put("commit", new commit());
      return processMap;
    }

    public static class ping<I extends Iface> extends org.apache.thrift.ProcessFunction<I, ping_args> {
      public ping() {
        super("ping");
      }

      public ping_args getEmptyArgsInstance() {
        return new ping_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public ping_result getResult(I iface, ping_args args) throws org.apache.thrift.TException {
        ping_result result = new ping_result();
        result.success = iface.ping();
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class read<I extends Iface> extends org.apache.thrift.ProcessFunction<I, read_args> {
      public read() {
        super("read");
      }

      public read_args getEmptyArgsInstance() {
        return new read_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public read_result getResult(I iface, read_args args) throws org.apache.thrift.TException {
        read_result result = new read_result();
        result.success = iface.read(args.key);
        return result;
      }
    }

    public static class read2<I extends Iface> extends org.apache.thrift.ProcessFunction<I, read2_args> {
      public read2() {
        super("read2");
      }

      public read2_args getEmptyArgsInstance() {
        return new read2_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public read2_result getResult(I iface, read2_args args) throws org.apache.thrift.TException {
        read2_result result = new read2_result();
        result.success = iface.read2(args.table, args.key, args.columns);
        return result;
      }
    }

    public static class read3<I extends Iface> extends org.apache.thrift.ProcessFunction<I, read3_args> {
      public read3() {
        super("read3");
      }

      public read3_args getEmptyArgsInstance() {
        return new read3_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public read3_result getResult(I iface, read3_args args) throws org.apache.thrift.TException {
        read3_result result = new read3_result();
        result.success = iface.read3(args.table, args.key_prefix, args.columns, args.constraintColumn, args.constraintValue, args.orderColumn, args.isAssending);
        return result;
      }
    }

    public static class read4<I extends Iface> extends org.apache.thrift.ProcessFunction<I, read4_args> {
      public read4() {
        super("read4");
      }

      public read4_args getEmptyArgsInstance() {
        return new read4_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public read4_result getResult(I iface, read4_args args) throws org.apache.thrift.TException {
        read4_result result = new read4_result();
        result.success = iface.read4(args.table, args.key_prefix, args.projectionColumn, args.constraintColumn, args.lowerBound, args.upperBound);
        return result;
      }
    }

    public static class read5<I extends Iface> extends org.apache.thrift.ProcessFunction<I, read5_args> {
      public read5() {
        super("read5");
      }

      public read5_args getEmptyArgsInstance() {
        return new read5_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public read5_result getResult(I iface, read5_args args) throws org.apache.thrift.TException {
        read5_result result = new read5_result();
        result.success = iface.read5(args.table, args.key_prefix, args.constraintColumn, args.lowerBound, args.upperBound);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class commit<I extends Iface> extends org.apache.thrift.ProcessFunction<I, commit_args> {
      public commit() {
        super("commit");
      }

      public commit_args getEmptyArgsInstance() {
        return new commit_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public commit_result getResult(I iface, commit_args args) throws org.apache.thrift.TException {
        commit_result result = new commit_result();
        result.success = iface.commit(args.transactionId, args.options);
        result.setSuccessIsSet(true);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("ping", new ping());
      processMap.put("read", new read());
      processMap.put("read2", new read2());
      processMap.put("read3", new read3());
      processMap.put("read4", new read4());
      processMap.put("read5", new read5());
      processMap.put("commit", new commit());
      return processMap;
    }

    public static class ping<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, ping_args, Boolean> {
      public ping() {
        super("ping");
      }

      public ping_args getEmptyArgsInstance() {
        return new ping_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            ping_result result = new ping_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            ping_result result = new ping_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, ping_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.ping(resultHandler);
      }
    }

    public static class read<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, read_args, edu.ucsb.cs.mdcc.messaging.ReadValue> {
      public read() {
        super("read");
      }

      public read_args getEmptyArgsInstance() {
        return new read_args();
      }

      public AsyncMethodCallback<edu.ucsb.cs.mdcc.messaging.ReadValue> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<edu.ucsb.cs.mdcc.messaging.ReadValue>() { 
          public void onComplete(edu.ucsb.cs.mdcc.messaging.ReadValue o) {
            read_result result = new read_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            read_result result = new read_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, read_args args, org.apache.thrift.async.AsyncMethodCallback<edu.ucsb.cs.mdcc.messaging.ReadValue> resultHandler) throws TException {
        iface.read(args.key,resultHandler);
      }
    }

    public static class read2<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, read2_args, Map<String,edu.ucsb.cs.mdcc.messaging.ReadValue>> {
      public read2() {
        super("read2");
      }

      public read2_args getEmptyArgsInstance() {
        return new read2_args();
      }

      public AsyncMethodCallback<Map<String,edu.ucsb.cs.mdcc.messaging.ReadValue>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Map<String,edu.ucsb.cs.mdcc.messaging.ReadValue>>() { 
          public void onComplete(Map<String,edu.ucsb.cs.mdcc.messaging.ReadValue> o) {
            read2_result result = new read2_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            read2_result result = new read2_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, read2_args args, org.apache.thrift.async.AsyncMethodCallback<Map<String,edu.ucsb.cs.mdcc.messaging.ReadValue>> resultHandler) throws TException {
        iface.read2(args.table, args.key, args.columns,resultHandler);
      }
    }

    public static class read3<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, read3_args, List<Map<String,edu.ucsb.cs.mdcc.messaging.ReadValue>>> {
      public read3() {
        super("read3");
      }

      public read3_args getEmptyArgsInstance() {
        return new read3_args();
      }

      public AsyncMethodCallback<List<Map<String,edu.ucsb.cs.mdcc.messaging.ReadValue>>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<Map<String,edu.ucsb.cs.mdcc.messaging.ReadValue>>>() { 
          public void onComplete(List<Map<String,edu.ucsb.cs.mdcc.messaging.ReadValue>> o) {
            read3_result result = new read3_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            read3_result result = new read3_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, read3_args args, org.apache.thrift.async.AsyncMethodCallback<List<Map<String,edu.ucsb.cs.mdcc.messaging.ReadValue>>> resultHandler) throws TException {
        iface.read3(args.table, args.key_prefix, args.columns, args.constraintColumn, args.constraintValue, args.orderColumn, args.isAssending,resultHandler);
      }
    }

    public static class read4<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, read4_args, List<edu.ucsb.cs.mdcc.messaging.ReadValue>> {
      public read4() {
        super("read4");
      }

      public read4_args getEmptyArgsInstance() {
        return new read4_args();
      }

      public AsyncMethodCallback<List<edu.ucsb.cs.mdcc.messaging.ReadValue>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<edu.ucsb.cs.mdcc.messaging.ReadValue>>() { 
          public void onComplete(List<edu.ucsb.cs.mdcc.messaging.ReadValue> o) {
            read4_result result = new read4_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            read4_result result = new read4_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, read4_args args, org.apache.thrift.async.AsyncMethodCallback<List<edu.ucsb.cs.mdcc.messaging.ReadValue>> resultHandler) throws TException {
        iface.read4(args.table, args.key_prefix, args.projectionColumn, args.constraintColumn, args.lowerBound, args.upperBound,resultHandler);
      }
    }

    public static class read5<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, read5_args, Integer> {
      public read5() {
        super("read5");
      }

      public read5_args getEmptyArgsInstance() {
        return new read5_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            read5_result result = new read5_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            read5_result result = new read5_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, read5_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.read5(args.table, args.key_prefix, args.constraintColumn, args.lowerBound, args.upperBound,resultHandler);
      }
    }

    public static class commit<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, commit_args, Boolean> {
      public commit() {
        super("commit");
      }

      public commit_args getEmptyArgsInstance() {
        return new commit_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            commit_result result = new commit_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            commit_result result = new commit_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, commit_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.commit(args.transactionId, args.options,resultHandler);
      }
    }

  }

  public static class ping_args implements org.apache.thrift.TBase<ping_args, ping_args._Fields>, java.io.Serializable, Cloneable, Comparable<ping_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ping_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new ping_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new ping_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ping_args.class, metaDataMap);
    }

    public ping_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ping_args(ping_args other) {
    }

    public ping_args deepCopy() {
      return new ping_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof ping_args)
        return this.equals((ping_args)that);
      return false;
    }

    public boolean equals(ping_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(ping_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("ping_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ping_argsStandardSchemeFactory implements SchemeFactory {
      public ping_argsStandardScheme getScheme() {
        return new ping_argsStandardScheme();
      }
    }

    private static class ping_argsStandardScheme extends StandardScheme<ping_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ping_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ping_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ping_argsTupleSchemeFactory implements SchemeFactory {
      public ping_argsTupleScheme getScheme() {
        return new ping_argsTupleScheme();
      }
    }

    private static class ping_argsTupleScheme extends TupleScheme<ping_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ping_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ping_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class ping_result implements org.apache.thrift.TBase<ping_result, ping_result._Fields>, java.io.Serializable, Cloneable, Comparable<ping_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ping_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new ping_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new ping_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ping_result.class, metaDataMap);
    }

    public ping_result() {
    }

    public ping_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ping_result(ping_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public ping_result deepCopy() {
      return new ping_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public ping_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof ping_result)
        return this.equals((ping_result)that);
      return false;
    }

    public boolean equals(ping_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(ping_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("ping_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ping_resultStandardSchemeFactory implements SchemeFactory {
      public ping_resultStandardScheme getScheme() {
        return new ping_resultStandardScheme();
      }
    }

    private static class ping_resultStandardScheme extends StandardScheme<ping_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ping_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ping_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ping_resultTupleSchemeFactory implements SchemeFactory {
      public ping_resultTupleScheme getScheme() {
        return new ping_resultTupleScheme();
      }
    }

    private static class ping_resultTupleScheme extends TupleScheme<ping_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ping_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ping_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class read_args implements org.apache.thrift.TBase<read_args, read_args._Fields>, java.io.Serializable, Cloneable, Comparable<read_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("read_args");

    private static final org.apache.thrift.protocol.TField KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("key", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new read_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new read_argsTupleSchemeFactory());
    }

    public String key; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      KEY((short)1, "key");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // KEY
            return KEY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.KEY, new org.apache.thrift.meta_data.FieldMetaData("key", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(read_args.class, metaDataMap);
    }

    public read_args() {
    }

    public read_args(
      String key)
    {
      this();
      this.key = key;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public read_args(read_args other) {
      if (other.isSetKey()) {
        this.key = other.key;
      }
    }

    public read_args deepCopy() {
      return new read_args(this);
    }

    @Override
    public void clear() {
      this.key = null;
    }

    public String getKey() {
      return this.key;
    }

    public read_args setKey(String key) {
      this.key = key;
      return this;
    }

    public void unsetKey() {
      this.key = null;
    }

    /** Returns true if field key is set (has been assigned a value) and false otherwise */
    public boolean isSetKey() {
      return this.key != null;
    }

    public void setKeyIsSet(boolean value) {
      if (!value) {
        this.key = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case KEY:
        if (value == null) {
          unsetKey();
        } else {
          setKey((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case KEY:
        return getKey();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case KEY:
        return isSetKey();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof read_args)
        return this.equals((read_args)that);
      return false;
    }

    public boolean equals(read_args that) {
      if (that == null)
        return false;

      boolean this_present_key = true && this.isSetKey();
      boolean that_present_key = true && that.isSetKey();
      if (this_present_key || that_present_key) {
        if (!(this_present_key && that_present_key))
          return false;
        if (!this.key.equals(that.key))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(read_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetKey()).compareTo(other.isSetKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.key, other.key);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("read_args(");
      boolean first = true;

      sb.append("key:");
      if (this.key == null) {
        sb.append("null");
      } else {
        sb.append(this.key);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class read_argsStandardSchemeFactory implements SchemeFactory {
      public read_argsStandardScheme getScheme() {
        return new read_argsStandardScheme();
      }
    }

    private static class read_argsStandardScheme extends StandardScheme<read_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, read_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // KEY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.key = iprot.readString();
                struct.setKeyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, read_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.key != null) {
          oprot.writeFieldBegin(KEY_FIELD_DESC);
          oprot.writeString(struct.key);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class read_argsTupleSchemeFactory implements SchemeFactory {
      public read_argsTupleScheme getScheme() {
        return new read_argsTupleScheme();
      }
    }

    private static class read_argsTupleScheme extends TupleScheme<read_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, read_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetKey()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetKey()) {
          oprot.writeString(struct.key);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, read_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.key = iprot.readString();
          struct.setKeyIsSet(true);
        }
      }
    }

  }

  public static class read_result implements org.apache.thrift.TBase<read_result, read_result._Fields>, java.io.Serializable, Cloneable, Comparable<read_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("read_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new read_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new read_resultTupleSchemeFactory());
    }

    public edu.ucsb.cs.mdcc.messaging.ReadValue success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, edu.ucsb.cs.mdcc.messaging.ReadValue.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(read_result.class, metaDataMap);
    }

    public read_result() {
    }

    public read_result(
      edu.ucsb.cs.mdcc.messaging.ReadValue success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public read_result(read_result other) {
      if (other.isSetSuccess()) {
        this.success = new edu.ucsb.cs.mdcc.messaging.ReadValue(other.success);
      }
    }

    public read_result deepCopy() {
      return new read_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public edu.ucsb.cs.mdcc.messaging.ReadValue getSuccess() {
      return this.success;
    }

    public read_result setSuccess(edu.ucsb.cs.mdcc.messaging.ReadValue success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((edu.ucsb.cs.mdcc.messaging.ReadValue)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof read_result)
        return this.equals((read_result)that);
      return false;
    }

    public boolean equals(read_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(read_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("read_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class read_resultStandardSchemeFactory implements SchemeFactory {
      public read_resultStandardScheme getScheme() {
        return new read_resultStandardScheme();
      }
    }

    private static class read_resultStandardScheme extends StandardScheme<read_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, read_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new edu.ucsb.cs.mdcc.messaging.ReadValue();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, read_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class read_resultTupleSchemeFactory implements SchemeFactory {
      public read_resultTupleScheme getScheme() {
        return new read_resultTupleScheme();
      }
    }

    private static class read_resultTupleScheme extends TupleScheme<read_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, read_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, read_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new edu.ucsb.cs.mdcc.messaging.ReadValue();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class read2_args implements org.apache.thrift.TBase<read2_args, read2_args._Fields>, java.io.Serializable, Cloneable, Comparable<read2_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("read2_args");

    private static final org.apache.thrift.protocol.TField TABLE_FIELD_DESC = new org.apache.thrift.protocol.TField("table", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("key", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField COLUMNS_FIELD_DESC = new org.apache.thrift.protocol.TField("columns", org.apache.thrift.protocol.TType.LIST, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new read2_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new read2_argsTupleSchemeFactory());
    }

    public String table; // required
    public String key; // required
    public List<String> columns; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TABLE((short)1, "table"),
      KEY((short)2, "key"),
      COLUMNS((short)3, "columns");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TABLE
            return TABLE;
          case 2: // KEY
            return KEY;
          case 3: // COLUMNS
            return COLUMNS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TABLE, new org.apache.thrift.meta_data.FieldMetaData("table", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.KEY, new org.apache.thrift.meta_data.FieldMetaData("key", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.COLUMNS, new org.apache.thrift.meta_data.FieldMetaData("columns", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(read2_args.class, metaDataMap);
    }

    public read2_args() {
    }

    public read2_args(
      String table,
      String key,
      List<String> columns)
    {
      this();
      this.table = table;
      this.key = key;
      this.columns = columns;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public read2_args(read2_args other) {
      if (other.isSetTable()) {
        this.table = other.table;
      }
      if (other.isSetKey()) {
        this.key = other.key;
      }
      if (other.isSetColumns()) {
        List<String> __this__columns = new ArrayList<String>(other.columns);
        this.columns = __this__columns;
      }
    }

    public read2_args deepCopy() {
      return new read2_args(this);
    }

    @Override
    public void clear() {
      this.table = null;
      this.key = null;
      this.columns = null;
    }

    public String getTable() {
      return this.table;
    }

    public read2_args setTable(String table) {
      this.table = table;
      return this;
    }

    public void unsetTable() {
      this.table = null;
    }

    /** Returns true if field table is set (has been assigned a value) and false otherwise */
    public boolean isSetTable() {
      return this.table != null;
    }

    public void setTableIsSet(boolean value) {
      if (!value) {
        this.table = null;
      }
    }

    public String getKey() {
      return this.key;
    }

    public read2_args setKey(String key) {
      this.key = key;
      return this;
    }

    public void unsetKey() {
      this.key = null;
    }

    /** Returns true if field key is set (has been assigned a value) and false otherwise */
    public boolean isSetKey() {
      return this.key != null;
    }

    public void setKeyIsSet(boolean value) {
      if (!value) {
        this.key = null;
      }
    }

    public int getColumnsSize() {
      return (this.columns == null) ? 0 : this.columns.size();
    }

    public java.util.Iterator<String> getColumnsIterator() {
      return (this.columns == null) ? null : this.columns.iterator();
    }

    public void addToColumns(String elem) {
      if (this.columns == null) {
        this.columns = new ArrayList<String>();
      }
      this.columns.add(elem);
    }

    public List<String> getColumns() {
      return this.columns;
    }

    public read2_args setColumns(List<String> columns) {
      this.columns = columns;
      return this;
    }

    public void unsetColumns() {
      this.columns = null;
    }

    /** Returns true if field columns is set (has been assigned a value) and false otherwise */
    public boolean isSetColumns() {
      return this.columns != null;
    }

    public void setColumnsIsSet(boolean value) {
      if (!value) {
        this.columns = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TABLE:
        if (value == null) {
          unsetTable();
        } else {
          setTable((String)value);
        }
        break;

      case KEY:
        if (value == null) {
          unsetKey();
        } else {
          setKey((String)value);
        }
        break;

      case COLUMNS:
        if (value == null) {
          unsetColumns();
        } else {
          setColumns((List<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TABLE:
        return getTable();

      case KEY:
        return getKey();

      case COLUMNS:
        return getColumns();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TABLE:
        return isSetTable();
      case KEY:
        return isSetKey();
      case COLUMNS:
        return isSetColumns();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof read2_args)
        return this.equals((read2_args)that);
      return false;
    }

    public boolean equals(read2_args that) {
      if (that == null)
        return false;

      boolean this_present_table = true && this.isSetTable();
      boolean that_present_table = true && that.isSetTable();
      if (this_present_table || that_present_table) {
        if (!(this_present_table && that_present_table))
          return false;
        if (!this.table.equals(that.table))
          return false;
      }

      boolean this_present_key = true && this.isSetKey();
      boolean that_present_key = true && that.isSetKey();
      if (this_present_key || that_present_key) {
        if (!(this_present_key && that_present_key))
          return false;
        if (!this.key.equals(that.key))
          return false;
      }

      boolean this_present_columns = true && this.isSetColumns();
      boolean that_present_columns = true && that.isSetColumns();
      if (this_present_columns || that_present_columns) {
        if (!(this_present_columns && that_present_columns))
          return false;
        if (!this.columns.equals(that.columns))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(read2_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTable()).compareTo(other.isSetTable());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTable()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table, other.table);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetKey()).compareTo(other.isSetKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.key, other.key);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetColumns()).compareTo(other.isSetColumns());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetColumns()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.columns, other.columns);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("read2_args(");
      boolean first = true;

      sb.append("table:");
      if (this.table == null) {
        sb.append("null");
      } else {
        sb.append(this.table);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("key:");
      if (this.key == null) {
        sb.append("null");
      } else {
        sb.append(this.key);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("columns:");
      if (this.columns == null) {
        sb.append("null");
      } else {
        sb.append(this.columns);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class read2_argsStandardSchemeFactory implements SchemeFactory {
      public read2_argsStandardScheme getScheme() {
        return new read2_argsStandardScheme();
      }
    }

    private static class read2_argsStandardScheme extends StandardScheme<read2_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, read2_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TABLE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.table = iprot.readString();
                struct.setTableIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // KEY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.key = iprot.readString();
                struct.setKeyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // COLUMNS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.columns = new ArrayList<String>(_list0.size);
                  for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                  {
                    String _elem2;
                    _elem2 = iprot.readString();
                    struct.columns.add(_elem2);
                  }
                  iprot.readListEnd();
                }
                struct.setColumnsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, read2_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.table != null) {
          oprot.writeFieldBegin(TABLE_FIELD_DESC);
          oprot.writeString(struct.table);
          oprot.writeFieldEnd();
        }
        if (struct.key != null) {
          oprot.writeFieldBegin(KEY_FIELD_DESC);
          oprot.writeString(struct.key);
          oprot.writeFieldEnd();
        }
        if (struct.columns != null) {
          oprot.writeFieldBegin(COLUMNS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.columns.size()));
            for (String _iter3 : struct.columns)
            {
              oprot.writeString(_iter3);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class read2_argsTupleSchemeFactory implements SchemeFactory {
      public read2_argsTupleScheme getScheme() {
        return new read2_argsTupleScheme();
      }
    }

    private static class read2_argsTupleScheme extends TupleScheme<read2_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, read2_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTable()) {
          optionals.set(0);
        }
        if (struct.isSetKey()) {
          optionals.set(1);
        }
        if (struct.isSetColumns()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetTable()) {
          oprot.writeString(struct.table);
        }
        if (struct.isSetKey()) {
          oprot.writeString(struct.key);
        }
        if (struct.isSetColumns()) {
          {
            oprot.writeI32(struct.columns.size());
            for (String _iter4 : struct.columns)
            {
              oprot.writeString(_iter4);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, read2_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.table = iprot.readString();
          struct.setTableIsSet(true);
        }
        if (incoming.get(1)) {
          struct.key = iprot.readString();
          struct.setKeyIsSet(true);
        }
        if (incoming.get(2)) {
          {
            org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.columns = new ArrayList<String>(_list5.size);
            for (int _i6 = 0; _i6 < _list5.size; ++_i6)
            {
              String _elem7;
              _elem7 = iprot.readString();
              struct.columns.add(_elem7);
            }
          }
          struct.setColumnsIsSet(true);
        }
      }
    }

  }

  public static class read2_result implements org.apache.thrift.TBase<read2_result, read2_result._Fields>, java.io.Serializable, Cloneable, Comparable<read2_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("read2_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new read2_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new read2_resultTupleSchemeFactory());
    }

    public Map<String,edu.ucsb.cs.mdcc.messaging.ReadValue> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, edu.ucsb.cs.mdcc.messaging.ReadValue.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(read2_result.class, metaDataMap);
    }

    public read2_result() {
    }

    public read2_result(
      Map<String,edu.ucsb.cs.mdcc.messaging.ReadValue> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public read2_result(read2_result other) {
      if (other.isSetSuccess()) {
        Map<String,edu.ucsb.cs.mdcc.messaging.ReadValue> __this__success = new HashMap<String,edu.ucsb.cs.mdcc.messaging.ReadValue>(other.success.size());
        for (Map.Entry<String, edu.ucsb.cs.mdcc.messaging.ReadValue> other_element : other.success.entrySet()) {

          String other_element_key = other_element.getKey();
          edu.ucsb.cs.mdcc.messaging.ReadValue other_element_value = other_element.getValue();

          String __this__success_copy_key = other_element_key;

          edu.ucsb.cs.mdcc.messaging.ReadValue __this__success_copy_value = new edu.ucsb.cs.mdcc.messaging.ReadValue(other_element_value);

          __this__success.put(__this__success_copy_key, __this__success_copy_value);
        }
        this.success = __this__success;
      }
    }

    public read2_result deepCopy() {
      return new read2_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(String key, edu.ucsb.cs.mdcc.messaging.ReadValue val) {
      if (this.success == null) {
        this.success = new HashMap<String,edu.ucsb.cs.mdcc.messaging.ReadValue>();
      }
      this.success.put(key, val);
    }

    public Map<String,edu.ucsb.cs.mdcc.messaging.ReadValue> getSuccess() {
      return this.success;
    }

    public read2_result setSuccess(Map<String,edu.ucsb.cs.mdcc.messaging.ReadValue> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<String,edu.ucsb.cs.mdcc.messaging.ReadValue>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof read2_result)
        return this.equals((read2_result)that);
      return false;
    }

    public boolean equals(read2_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(read2_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("read2_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class read2_resultStandardSchemeFactory implements SchemeFactory {
      public read2_resultStandardScheme getScheme() {
        return new read2_resultStandardScheme();
      }
    }

    private static class read2_resultStandardScheme extends StandardScheme<read2_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, read2_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map8 = iprot.readMapBegin();
                  struct.success = new HashMap<String,edu.ucsb.cs.mdcc.messaging.ReadValue>(2*_map8.size);
                  for (int _i9 = 0; _i9 < _map8.size; ++_i9)
                  {
                    String _key10;
                    edu.ucsb.cs.mdcc.messaging.ReadValue _val11;
                    _key10 = iprot.readString();
                    _val11 = new edu.ucsb.cs.mdcc.messaging.ReadValue();
                    _val11.read(iprot);
                    struct.success.put(_key10, _val11);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, read2_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (Map.Entry<String, edu.ucsb.cs.mdcc.messaging.ReadValue> _iter12 : struct.success.entrySet())
            {
              oprot.writeString(_iter12.getKey());
              _iter12.getValue().write(oprot);
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class read2_resultTupleSchemeFactory implements SchemeFactory {
      public read2_resultTupleScheme getScheme() {
        return new read2_resultTupleScheme();
      }
    }

    private static class read2_resultTupleScheme extends TupleScheme<read2_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, read2_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map.Entry<String, edu.ucsb.cs.mdcc.messaging.ReadValue> _iter13 : struct.success.entrySet())
            {
              oprot.writeString(_iter13.getKey());
              _iter13.getValue().write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, read2_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map14 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new HashMap<String,edu.ucsb.cs.mdcc.messaging.ReadValue>(2*_map14.size);
            for (int _i15 = 0; _i15 < _map14.size; ++_i15)
            {
              String _key16;
              edu.ucsb.cs.mdcc.messaging.ReadValue _val17;
              _key16 = iprot.readString();
              _val17 = new edu.ucsb.cs.mdcc.messaging.ReadValue();
              _val17.read(iprot);
              struct.success.put(_key16, _val17);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class read3_args implements org.apache.thrift.TBase<read3_args, read3_args._Fields>, java.io.Serializable, Cloneable, Comparable<read3_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("read3_args");

    private static final org.apache.thrift.protocol.TField TABLE_FIELD_DESC = new org.apache.thrift.protocol.TField("table", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField KEY_PREFIX_FIELD_DESC = new org.apache.thrift.protocol.TField("key_prefix", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField COLUMNS_FIELD_DESC = new org.apache.thrift.protocol.TField("columns", org.apache.thrift.protocol.TType.LIST, (short)3);
    private static final org.apache.thrift.protocol.TField CONSTRAINT_COLUMN_FIELD_DESC = new org.apache.thrift.protocol.TField("constraintColumn", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField CONSTRAINT_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("constraintValue", org.apache.thrift.protocol.TType.STRING, (short)5);
    private static final org.apache.thrift.protocol.TField ORDER_COLUMN_FIELD_DESC = new org.apache.thrift.protocol.TField("orderColumn", org.apache.thrift.protocol.TType.STRING, (short)6);
    private static final org.apache.thrift.protocol.TField IS_ASSENDING_FIELD_DESC = new org.apache.thrift.protocol.TField("isAssending", org.apache.thrift.protocol.TType.BOOL, (short)7);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new read3_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new read3_argsTupleSchemeFactory());
    }

    public String table; // required
    public String key_prefix; // required
    public List<String> columns; // required
    public String constraintColumn; // required
    public String constraintValue; // required
    public String orderColumn; // required
    public boolean isAssending; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TABLE((short)1, "table"),
      KEY_PREFIX((short)2, "key_prefix"),
      COLUMNS((short)3, "columns"),
      CONSTRAINT_COLUMN((short)4, "constraintColumn"),
      CONSTRAINT_VALUE((short)5, "constraintValue"),
      ORDER_COLUMN((short)6, "orderColumn"),
      IS_ASSENDING((short)7, "isAssending");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TABLE
            return TABLE;
          case 2: // KEY_PREFIX
            return KEY_PREFIX;
          case 3: // COLUMNS
            return COLUMNS;
          case 4: // CONSTRAINT_COLUMN
            return CONSTRAINT_COLUMN;
          case 5: // CONSTRAINT_VALUE
            return CONSTRAINT_VALUE;
          case 6: // ORDER_COLUMN
            return ORDER_COLUMN;
          case 7: // IS_ASSENDING
            return IS_ASSENDING;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ISASSENDING_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TABLE, new org.apache.thrift.meta_data.FieldMetaData("table", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.KEY_PREFIX, new org.apache.thrift.meta_data.FieldMetaData("key_prefix", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.COLUMNS, new org.apache.thrift.meta_data.FieldMetaData("columns", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.CONSTRAINT_COLUMN, new org.apache.thrift.meta_data.FieldMetaData("constraintColumn", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CONSTRAINT_VALUE, new org.apache.thrift.meta_data.FieldMetaData("constraintValue", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ORDER_COLUMN, new org.apache.thrift.meta_data.FieldMetaData("orderColumn", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.IS_ASSENDING, new org.apache.thrift.meta_data.FieldMetaData("isAssending", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(read3_args.class, metaDataMap);
    }

    public read3_args() {
    }

    public read3_args(
      String table,
      String key_prefix,
      List<String> columns,
      String constraintColumn,
      String constraintValue,
      String orderColumn,
      boolean isAssending)
    {
      this();
      this.table = table;
      this.key_prefix = key_prefix;
      this.columns = columns;
      this.constraintColumn = constraintColumn;
      this.constraintValue = constraintValue;
      this.orderColumn = orderColumn;
      this.isAssending = isAssending;
      setIsAssendingIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public read3_args(read3_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetTable()) {
        this.table = other.table;
      }
      if (other.isSetKey_prefix()) {
        this.key_prefix = other.key_prefix;
      }
      if (other.isSetColumns()) {
        List<String> __this__columns = new ArrayList<String>(other.columns);
        this.columns = __this__columns;
      }
      if (other.isSetConstraintColumn()) {
        this.constraintColumn = other.constraintColumn;
      }
      if (other.isSetConstraintValue()) {
        this.constraintValue = other.constraintValue;
      }
      if (other.isSetOrderColumn()) {
        this.orderColumn = other.orderColumn;
      }
      this.isAssending = other.isAssending;
    }

    public read3_args deepCopy() {
      return new read3_args(this);
    }

    @Override
    public void clear() {
      this.table = null;
      this.key_prefix = null;
      this.columns = null;
      this.constraintColumn = null;
      this.constraintValue = null;
      this.orderColumn = null;
      setIsAssendingIsSet(false);
      this.isAssending = false;
    }

    public String getTable() {
      return this.table;
    }

    public read3_args setTable(String table) {
      this.table = table;
      return this;
    }

    public void unsetTable() {
      this.table = null;
    }

    /** Returns true if field table is set (has been assigned a value) and false otherwise */
    public boolean isSetTable() {
      return this.table != null;
    }

    public void setTableIsSet(boolean value) {
      if (!value) {
        this.table = null;
      }
    }

    public String getKey_prefix() {
      return this.key_prefix;
    }

    public read3_args setKey_prefix(String key_prefix) {
      this.key_prefix = key_prefix;
      return this;
    }

    public void unsetKey_prefix() {
      this.key_prefix = null;
    }

    /** Returns true if field key_prefix is set (has been assigned a value) and false otherwise */
    public boolean isSetKey_prefix() {
      return this.key_prefix != null;
    }

    public void setKey_prefixIsSet(boolean value) {
      if (!value) {
        this.key_prefix = null;
      }
    }

    public int getColumnsSize() {
      return (this.columns == null) ? 0 : this.columns.size();
    }

    public java.util.Iterator<String> getColumnsIterator() {
      return (this.columns == null) ? null : this.columns.iterator();
    }

    public void addToColumns(String elem) {
      if (this.columns == null) {
        this.columns = new ArrayList<String>();
      }
      this.columns.add(elem);
    }

    public List<String> getColumns() {
      return this.columns;
    }

    public read3_args setColumns(List<String> columns) {
      this.columns = columns;
      return this;
    }

    public void unsetColumns() {
      this.columns = null;
    }

    /** Returns true if field columns is set (has been assigned a value) and false otherwise */
    public boolean isSetColumns() {
      return this.columns != null;
    }

    public void setColumnsIsSet(boolean value) {
      if (!value) {
        this.columns = null;
      }
    }

    public String getConstraintColumn() {
      return this.constraintColumn;
    }

    public read3_args setConstraintColumn(String constraintColumn) {
      this.constraintColumn = constraintColumn;
      return this;
    }

    public void unsetConstraintColumn() {
      this.constraintColumn = null;
    }

    /** Returns true if field constraintColumn is set (has been assigned a value) and false otherwise */
    public boolean isSetConstraintColumn() {
      return this.constraintColumn != null;
    }

    public void setConstraintColumnIsSet(boolean value) {
      if (!value) {
        this.constraintColumn = null;
      }
    }

    public String getConstraintValue() {
      return this.constraintValue;
    }

    public read3_args setConstraintValue(String constraintValue) {
      this.constraintValue = constraintValue;
      return this;
    }

    public void unsetConstraintValue() {
      this.constraintValue = null;
    }

    /** Returns true if field constraintValue is set (has been assigned a value) and false otherwise */
    public boolean isSetConstraintValue() {
      return this.constraintValue != null;
    }

    public void setConstraintValueIsSet(boolean value) {
      if (!value) {
        this.constraintValue = null;
      }
    }

    public String getOrderColumn() {
      return this.orderColumn;
    }

    public read3_args setOrderColumn(String orderColumn) {
      this.orderColumn = orderColumn;
      return this;
    }

    public void unsetOrderColumn() {
      this.orderColumn = null;
    }

    /** Returns true if field orderColumn is set (has been assigned a value) and false otherwise */
    public boolean isSetOrderColumn() {
      return this.orderColumn != null;
    }

    public void setOrderColumnIsSet(boolean value) {
      if (!value) {
        this.orderColumn = null;
      }
    }

    public boolean isIsAssending() {
      return this.isAssending;
    }

    public read3_args setIsAssending(boolean isAssending) {
      this.isAssending = isAssending;
      setIsAssendingIsSet(true);
      return this;
    }

    public void unsetIsAssending() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISASSENDING_ISSET_ID);
    }

    /** Returns true if field isAssending is set (has been assigned a value) and false otherwise */
    public boolean isSetIsAssending() {
      return EncodingUtils.testBit(__isset_bitfield, __ISASSENDING_ISSET_ID);
    }

    public void setIsAssendingIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISASSENDING_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TABLE:
        if (value == null) {
          unsetTable();
        } else {
          setTable((String)value);
        }
        break;

      case KEY_PREFIX:
        if (value == null) {
          unsetKey_prefix();
        } else {
          setKey_prefix((String)value);
        }
        break;

      case COLUMNS:
        if (value == null) {
          unsetColumns();
        } else {
          setColumns((List<String>)value);
        }
        break;

      case CONSTRAINT_COLUMN:
        if (value == null) {
          unsetConstraintColumn();
        } else {
          setConstraintColumn((String)value);
        }
        break;

      case CONSTRAINT_VALUE:
        if (value == null) {
          unsetConstraintValue();
        } else {
          setConstraintValue((String)value);
        }
        break;

      case ORDER_COLUMN:
        if (value == null) {
          unsetOrderColumn();
        } else {
          setOrderColumn((String)value);
        }
        break;

      case IS_ASSENDING:
        if (value == null) {
          unsetIsAssending();
        } else {
          setIsAssending((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TABLE:
        return getTable();

      case KEY_PREFIX:
        return getKey_prefix();

      case COLUMNS:
        return getColumns();

      case CONSTRAINT_COLUMN:
        return getConstraintColumn();

      case CONSTRAINT_VALUE:
        return getConstraintValue();

      case ORDER_COLUMN:
        return getOrderColumn();

      case IS_ASSENDING:
        return Boolean.valueOf(isIsAssending());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TABLE:
        return isSetTable();
      case KEY_PREFIX:
        return isSetKey_prefix();
      case COLUMNS:
        return isSetColumns();
      case CONSTRAINT_COLUMN:
        return isSetConstraintColumn();
      case CONSTRAINT_VALUE:
        return isSetConstraintValue();
      case ORDER_COLUMN:
        return isSetOrderColumn();
      case IS_ASSENDING:
        return isSetIsAssending();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof read3_args)
        return this.equals((read3_args)that);
      return false;
    }

    public boolean equals(read3_args that) {
      if (that == null)
        return false;

      boolean this_present_table = true && this.isSetTable();
      boolean that_present_table = true && that.isSetTable();
      if (this_present_table || that_present_table) {
        if (!(this_present_table && that_present_table))
          return false;
        if (!this.table.equals(that.table))
          return false;
      }

      boolean this_present_key_prefix = true && this.isSetKey_prefix();
      boolean that_present_key_prefix = true && that.isSetKey_prefix();
      if (this_present_key_prefix || that_present_key_prefix) {
        if (!(this_present_key_prefix && that_present_key_prefix))
          return false;
        if (!this.key_prefix.equals(that.key_prefix))
          return false;
      }

      boolean this_present_columns = true && this.isSetColumns();
      boolean that_present_columns = true && that.isSetColumns();
      if (this_present_columns || that_present_columns) {
        if (!(this_present_columns && that_present_columns))
          return false;
        if (!this.columns.equals(that.columns))
          return false;
      }

      boolean this_present_constraintColumn = true && this.isSetConstraintColumn();
      boolean that_present_constraintColumn = true && that.isSetConstraintColumn();
      if (this_present_constraintColumn || that_present_constraintColumn) {
        if (!(this_present_constraintColumn && that_present_constraintColumn))
          return false;
        if (!this.constraintColumn.equals(that.constraintColumn))
          return false;
      }

      boolean this_present_constraintValue = true && this.isSetConstraintValue();
      boolean that_present_constraintValue = true && that.isSetConstraintValue();
      if (this_present_constraintValue || that_present_constraintValue) {
        if (!(this_present_constraintValue && that_present_constraintValue))
          return false;
        if (!this.constraintValue.equals(that.constraintValue))
          return false;
      }

      boolean this_present_orderColumn = true && this.isSetOrderColumn();
      boolean that_present_orderColumn = true && that.isSetOrderColumn();
      if (this_present_orderColumn || that_present_orderColumn) {
        if (!(this_present_orderColumn && that_present_orderColumn))
          return false;
        if (!this.orderColumn.equals(that.orderColumn))
          return false;
      }

      boolean this_present_isAssending = true;
      boolean that_present_isAssending = true;
      if (this_present_isAssending || that_present_isAssending) {
        if (!(this_present_isAssending && that_present_isAssending))
          return false;
        if (this.isAssending != that.isAssending)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(read3_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTable()).compareTo(other.isSetTable());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTable()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table, other.table);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetKey_prefix()).compareTo(other.isSetKey_prefix());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKey_prefix()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.key_prefix, other.key_prefix);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetColumns()).compareTo(other.isSetColumns());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetColumns()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.columns, other.columns);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetConstraintColumn()).compareTo(other.isSetConstraintColumn());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetConstraintColumn()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.constraintColumn, other.constraintColumn);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetConstraintValue()).compareTo(other.isSetConstraintValue());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetConstraintValue()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.constraintValue, other.constraintValue);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOrderColumn()).compareTo(other.isSetOrderColumn());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOrderColumn()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderColumn, other.orderColumn);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIsAssending()).compareTo(other.isSetIsAssending());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIsAssending()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isAssending, other.isAssending);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("read3_args(");
      boolean first = true;

      sb.append("table:");
      if (this.table == null) {
        sb.append("null");
      } else {
        sb.append(this.table);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("key_prefix:");
      if (this.key_prefix == null) {
        sb.append("null");
      } else {
        sb.append(this.key_prefix);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("columns:");
      if (this.columns == null) {
        sb.append("null");
      } else {
        sb.append(this.columns);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("constraintColumn:");
      if (this.constraintColumn == null) {
        sb.append("null");
      } else {
        sb.append(this.constraintColumn);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("constraintValue:");
      if (this.constraintValue == null) {
        sb.append("null");
      } else {
        sb.append(this.constraintValue);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("orderColumn:");
      if (this.orderColumn == null) {
        sb.append("null");
      } else {
        sb.append(this.orderColumn);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("isAssending:");
      sb.append(this.isAssending);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class read3_argsStandardSchemeFactory implements SchemeFactory {
      public read3_argsStandardScheme getScheme() {
        return new read3_argsStandardScheme();
      }
    }

    private static class read3_argsStandardScheme extends StandardScheme<read3_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, read3_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TABLE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.table = iprot.readString();
                struct.setTableIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // KEY_PREFIX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.key_prefix = iprot.readString();
                struct.setKey_prefixIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // COLUMNS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list18 = iprot.readListBegin();
                  struct.columns = new ArrayList<String>(_list18.size);
                  for (int _i19 = 0; _i19 < _list18.size; ++_i19)
                  {
                    String _elem20;
                    _elem20 = iprot.readString();
                    struct.columns.add(_elem20);
                  }
                  iprot.readListEnd();
                }
                struct.setColumnsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // CONSTRAINT_COLUMN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.constraintColumn = iprot.readString();
                struct.setConstraintColumnIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // CONSTRAINT_VALUE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.constraintValue = iprot.readString();
                struct.setConstraintValueIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // ORDER_COLUMN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.orderColumn = iprot.readString();
                struct.setOrderColumnIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 7: // IS_ASSENDING
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.isAssending = iprot.readBool();
                struct.setIsAssendingIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, read3_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.table != null) {
          oprot.writeFieldBegin(TABLE_FIELD_DESC);
          oprot.writeString(struct.table);
          oprot.writeFieldEnd();
        }
        if (struct.key_prefix != null) {
          oprot.writeFieldBegin(KEY_PREFIX_FIELD_DESC);
          oprot.writeString(struct.key_prefix);
          oprot.writeFieldEnd();
        }
        if (struct.columns != null) {
          oprot.writeFieldBegin(COLUMNS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.columns.size()));
            for (String _iter21 : struct.columns)
            {
              oprot.writeString(_iter21);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.constraintColumn != null) {
          oprot.writeFieldBegin(CONSTRAINT_COLUMN_FIELD_DESC);
          oprot.writeString(struct.constraintColumn);
          oprot.writeFieldEnd();
        }
        if (struct.constraintValue != null) {
          oprot.writeFieldBegin(CONSTRAINT_VALUE_FIELD_DESC);
          oprot.writeString(struct.constraintValue);
          oprot.writeFieldEnd();
        }
        if (struct.orderColumn != null) {
          oprot.writeFieldBegin(ORDER_COLUMN_FIELD_DESC);
          oprot.writeString(struct.orderColumn);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(IS_ASSENDING_FIELD_DESC);
        oprot.writeBool(struct.isAssending);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class read3_argsTupleSchemeFactory implements SchemeFactory {
      public read3_argsTupleScheme getScheme() {
        return new read3_argsTupleScheme();
      }
    }

    private static class read3_argsTupleScheme extends TupleScheme<read3_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, read3_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTable()) {
          optionals.set(0);
        }
        if (struct.isSetKey_prefix()) {
          optionals.set(1);
        }
        if (struct.isSetColumns()) {
          optionals.set(2);
        }
        if (struct.isSetConstraintColumn()) {
          optionals.set(3);
        }
        if (struct.isSetConstraintValue()) {
          optionals.set(4);
        }
        if (struct.isSetOrderColumn()) {
          optionals.set(5);
        }
        if (struct.isSetIsAssending()) {
          optionals.set(6);
        }
        oprot.writeBitSet(optionals, 7);
        if (struct.isSetTable()) {
          oprot.writeString(struct.table);
        }
        if (struct.isSetKey_prefix()) {
          oprot.writeString(struct.key_prefix);
        }
        if (struct.isSetColumns()) {
          {
            oprot.writeI32(struct.columns.size());
            for (String _iter22 : struct.columns)
            {
              oprot.writeString(_iter22);
            }
          }
        }
        if (struct.isSetConstraintColumn()) {
          oprot.writeString(struct.constraintColumn);
        }
        if (struct.isSetConstraintValue()) {
          oprot.writeString(struct.constraintValue);
        }
        if (struct.isSetOrderColumn()) {
          oprot.writeString(struct.orderColumn);
        }
        if (struct.isSetIsAssending()) {
          oprot.writeBool(struct.isAssending);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, read3_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(7);
        if (incoming.get(0)) {
          struct.table = iprot.readString();
          struct.setTableIsSet(true);
        }
        if (incoming.get(1)) {
          struct.key_prefix = iprot.readString();
          struct.setKey_prefixIsSet(true);
        }
        if (incoming.get(2)) {
          {
            org.apache.thrift.protocol.TList _list23 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.columns = new ArrayList<String>(_list23.size);
            for (int _i24 = 0; _i24 < _list23.size; ++_i24)
            {
              String _elem25;
              _elem25 = iprot.readString();
              struct.columns.add(_elem25);
            }
          }
          struct.setColumnsIsSet(true);
        }
        if (incoming.get(3)) {
          struct.constraintColumn = iprot.readString();
          struct.setConstraintColumnIsSet(true);
        }
        if (incoming.get(4)) {
          struct.constraintValue = iprot.readString();
          struct.setConstraintValueIsSet(true);
        }
        if (incoming.get(5)) {
          struct.orderColumn = iprot.readString();
          struct.setOrderColumnIsSet(true);
        }
        if (incoming.get(6)) {
          struct.isAssending = iprot.readBool();
          struct.setIsAssendingIsSet(true);
        }
      }
    }

  }

  public static class read3_result implements org.apache.thrift.TBase<read3_result, read3_result._Fields>, java.io.Serializable, Cloneable, Comparable<read3_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("read3_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new read3_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new read3_resultTupleSchemeFactory());
    }

    public List<Map<String,edu.ucsb.cs.mdcc.messaging.ReadValue>> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
                  new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
                  new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, edu.ucsb.cs.mdcc.messaging.ReadValue.class)))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(read3_result.class, metaDataMap);
    }

    public read3_result() {
    }

    public read3_result(
      List<Map<String,edu.ucsb.cs.mdcc.messaging.ReadValue>> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public read3_result(read3_result other) {
      if (other.isSetSuccess()) {
        List<Map<String,edu.ucsb.cs.mdcc.messaging.ReadValue>> __this__success = new ArrayList<Map<String,edu.ucsb.cs.mdcc.messaging.ReadValue>>(other.success.size());
        for (Map<String,edu.ucsb.cs.mdcc.messaging.ReadValue> other_element : other.success) {
          Map<String,edu.ucsb.cs.mdcc.messaging.ReadValue> __this__success_copy = new HashMap<String,edu.ucsb.cs.mdcc.messaging.ReadValue>(other_element.size());
          for (Map.Entry<String, edu.ucsb.cs.mdcc.messaging.ReadValue> other_element_element : other_element.entrySet()) {

            String other_element_element_key = other_element_element.getKey();
            edu.ucsb.cs.mdcc.messaging.ReadValue other_element_element_value = other_element_element.getValue();

            String __this__success_copy_copy_key = other_element_element_key;

            edu.ucsb.cs.mdcc.messaging.ReadValue __this__success_copy_copy_value = new edu.ucsb.cs.mdcc.messaging.ReadValue(other_element_element_value);

            __this__success_copy.put(__this__success_copy_copy_key, __this__success_copy_copy_value);
          }
          __this__success.add(__this__success_copy);
        }
        this.success = __this__success;
      }
    }

    public read3_result deepCopy() {
      return new read3_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Map<String,edu.ucsb.cs.mdcc.messaging.ReadValue>> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(Map<String,edu.ucsb.cs.mdcc.messaging.ReadValue> elem) {
      if (this.success == null) {
        this.success = new ArrayList<Map<String,edu.ucsb.cs.mdcc.messaging.ReadValue>>();
      }
      this.success.add(elem);
    }

    public List<Map<String,edu.ucsb.cs.mdcc.messaging.ReadValue>> getSuccess() {
      return this.success;
    }

    public read3_result setSuccess(List<Map<String,edu.ucsb.cs.mdcc.messaging.ReadValue>> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<Map<String,edu.ucsb.cs.mdcc.messaging.ReadValue>>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof read3_result)
        return this.equals((read3_result)that);
      return false;
    }

    public boolean equals(read3_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(read3_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("read3_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class read3_resultStandardSchemeFactory implements SchemeFactory {
      public read3_resultStandardScheme getScheme() {
        return new read3_resultStandardScheme();
      }
    }

    private static class read3_resultStandardScheme extends StandardScheme<read3_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, read3_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list26 = iprot.readListBegin();
                  struct.success = new ArrayList<Map<String,edu.ucsb.cs.mdcc.messaging.ReadValue>>(_list26.size);
                  for (int _i27 = 0; _i27 < _list26.size; ++_i27)
                  {
                    Map<String,edu.ucsb.cs.mdcc.messaging.ReadValue> _elem28;
                    {
                      org.apache.thrift.protocol.TMap _map29 = iprot.readMapBegin();
                      _elem28 = new HashMap<String,edu.ucsb.cs.mdcc.messaging.ReadValue>(2*_map29.size);
                      for (int _i30 = 0; _i30 < _map29.size; ++_i30)
                      {
                        String _key31;
                        edu.ucsb.cs.mdcc.messaging.ReadValue _val32;
                        _key31 = iprot.readString();
                        _val32 = new edu.ucsb.cs.mdcc.messaging.ReadValue();
                        _val32.read(iprot);
                        _elem28.put(_key31, _val32);
                      }
                      iprot.readMapEnd();
                    }
                    struct.success.add(_elem28);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, read3_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.MAP, struct.success.size()));
            for (Map<String,edu.ucsb.cs.mdcc.messaging.ReadValue> _iter33 : struct.success)
            {
              {
                oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, _iter33.size()));
                for (Map.Entry<String, edu.ucsb.cs.mdcc.messaging.ReadValue> _iter34 : _iter33.entrySet())
                {
                  oprot.writeString(_iter34.getKey());
                  _iter34.getValue().write(oprot);
                }
                oprot.writeMapEnd();
              }
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class read3_resultTupleSchemeFactory implements SchemeFactory {
      public read3_resultTupleScheme getScheme() {
        return new read3_resultTupleScheme();
      }
    }

    private static class read3_resultTupleScheme extends TupleScheme<read3_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, read3_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map<String,edu.ucsb.cs.mdcc.messaging.ReadValue> _iter35 : struct.success)
            {
              {
                oprot.writeI32(_iter35.size());
                for (Map.Entry<String, edu.ucsb.cs.mdcc.messaging.ReadValue> _iter36 : _iter35.entrySet())
                {
                  oprot.writeString(_iter36.getKey());
                  _iter36.getValue().write(oprot);
                }
              }
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, read3_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list37 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.MAP, iprot.readI32());
            struct.success = new ArrayList<Map<String,edu.ucsb.cs.mdcc.messaging.ReadValue>>(_list37.size);
            for (int _i38 = 0; _i38 < _list37.size; ++_i38)
            {
              Map<String,edu.ucsb.cs.mdcc.messaging.ReadValue> _elem39;
              {
                org.apache.thrift.protocol.TMap _map40 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
                _elem39 = new HashMap<String,edu.ucsb.cs.mdcc.messaging.ReadValue>(2*_map40.size);
                for (int _i41 = 0; _i41 < _map40.size; ++_i41)
                {
                  String _key42;
                  edu.ucsb.cs.mdcc.messaging.ReadValue _val43;
                  _key42 = iprot.readString();
                  _val43 = new edu.ucsb.cs.mdcc.messaging.ReadValue();
                  _val43.read(iprot);
                  _elem39.put(_key42, _val43);
                }
              }
              struct.success.add(_elem39);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class read4_args implements org.apache.thrift.TBase<read4_args, read4_args._Fields>, java.io.Serializable, Cloneable, Comparable<read4_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("read4_args");

    private static final org.apache.thrift.protocol.TField TABLE_FIELD_DESC = new org.apache.thrift.protocol.TField("table", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField KEY_PREFIX_FIELD_DESC = new org.apache.thrift.protocol.TField("key_prefix", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField PROJECTION_COLUMN_FIELD_DESC = new org.apache.thrift.protocol.TField("projectionColumn", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField CONSTRAINT_COLUMN_FIELD_DESC = new org.apache.thrift.protocol.TField("constraintColumn", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField LOWER_BOUND_FIELD_DESC = new org.apache.thrift.protocol.TField("lowerBound", org.apache.thrift.protocol.TType.I32, (short)5);
    private static final org.apache.thrift.protocol.TField UPPER_BOUND_FIELD_DESC = new org.apache.thrift.protocol.TField("upperBound", org.apache.thrift.protocol.TType.I32, (short)6);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new read4_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new read4_argsTupleSchemeFactory());
    }

    public String table; // required
    public String key_prefix; // required
    public String projectionColumn; // required
    public String constraintColumn; // required
    public int lowerBound; // required
    public int upperBound; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TABLE((short)1, "table"),
      KEY_PREFIX((short)2, "key_prefix"),
      PROJECTION_COLUMN((short)3, "projectionColumn"),
      CONSTRAINT_COLUMN((short)4, "constraintColumn"),
      LOWER_BOUND((short)5, "lowerBound"),
      UPPER_BOUND((short)6, "upperBound");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TABLE
            return TABLE;
          case 2: // KEY_PREFIX
            return KEY_PREFIX;
          case 3: // PROJECTION_COLUMN
            return PROJECTION_COLUMN;
          case 4: // CONSTRAINT_COLUMN
            return CONSTRAINT_COLUMN;
          case 5: // LOWER_BOUND
            return LOWER_BOUND;
          case 6: // UPPER_BOUND
            return UPPER_BOUND;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __LOWERBOUND_ISSET_ID = 0;
    private static final int __UPPERBOUND_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TABLE, new org.apache.thrift.meta_data.FieldMetaData("table", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.KEY_PREFIX, new org.apache.thrift.meta_data.FieldMetaData("key_prefix", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PROJECTION_COLUMN, new org.apache.thrift.meta_data.FieldMetaData("projectionColumn", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CONSTRAINT_COLUMN, new org.apache.thrift.meta_data.FieldMetaData("constraintColumn", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.LOWER_BOUND, new org.apache.thrift.meta_data.FieldMetaData("lowerBound", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.UPPER_BOUND, new org.apache.thrift.meta_data.FieldMetaData("upperBound", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(read4_args.class, metaDataMap);
    }

    public read4_args() {
    }

    public read4_args(
      String table,
      String key_prefix,
      String projectionColumn,
      String constraintColumn,
      int lowerBound,
      int upperBound)
    {
      this();
      this.table = table;
      this.key_prefix = key_prefix;
      this.projectionColumn = projectionColumn;
      this.constraintColumn = constraintColumn;
      this.lowerBound = lowerBound;
      setLowerBoundIsSet(true);
      this.upperBound = upperBound;
      setUpperBoundIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public read4_args(read4_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetTable()) {
        this.table = other.table;
      }
      if (other.isSetKey_prefix()) {
        this.key_prefix = other.key_prefix;
      }
      if (other.isSetProjectionColumn()) {
        this.projectionColumn = other.projectionColumn;
      }
      if (other.isSetConstraintColumn()) {
        this.constraintColumn = other.constraintColumn;
      }
      this.lowerBound = other.lowerBound;
      this.upperBound = other.upperBound;
    }

    public read4_args deepCopy() {
      return new read4_args(this);
    }

    @Override
    public void clear() {
      this.table = null;
      this.key_prefix = null;
      this.projectionColumn = null;
      this.constraintColumn = null;
      setLowerBoundIsSet(false);
      this.lowerBound = 0;
      setUpperBoundIsSet(false);
      this.upperBound = 0;
    }

    public String getTable() {
      return this.table;
    }

    public read4_args setTable(String table) {
      this.table = table;
      return this;
    }

    public void unsetTable() {
      this.table = null;
    }

    /** Returns true if field table is set (has been assigned a value) and false otherwise */
    public boolean isSetTable() {
      return this.table != null;
    }

    public void setTableIsSet(boolean value) {
      if (!value) {
        this.table = null;
      }
    }

    public String getKey_prefix() {
      return this.key_prefix;
    }

    public read4_args setKey_prefix(String key_prefix) {
      this.key_prefix = key_prefix;
      return this;
    }

    public void unsetKey_prefix() {
      this.key_prefix = null;
    }

    /** Returns true if field key_prefix is set (has been assigned a value) and false otherwise */
    public boolean isSetKey_prefix() {
      return this.key_prefix != null;
    }

    public void setKey_prefixIsSet(boolean value) {
      if (!value) {
        this.key_prefix = null;
      }
    }

    public String getProjectionColumn() {
      return this.projectionColumn;
    }

    public read4_args setProjectionColumn(String projectionColumn) {
      this.projectionColumn = projectionColumn;
      return this;
    }

    public void unsetProjectionColumn() {
      this.projectionColumn = null;
    }

    /** Returns true if field projectionColumn is set (has been assigned a value) and false otherwise */
    public boolean isSetProjectionColumn() {
      return this.projectionColumn != null;
    }

    public void setProjectionColumnIsSet(boolean value) {
      if (!value) {
        this.projectionColumn = null;
      }
    }

    public String getConstraintColumn() {
      return this.constraintColumn;
    }

    public read4_args setConstraintColumn(String constraintColumn) {
      this.constraintColumn = constraintColumn;
      return this;
    }

    public void unsetConstraintColumn() {
      this.constraintColumn = null;
    }

    /** Returns true if field constraintColumn is set (has been assigned a value) and false otherwise */
    public boolean isSetConstraintColumn() {
      return this.constraintColumn != null;
    }

    public void setConstraintColumnIsSet(boolean value) {
      if (!value) {
        this.constraintColumn = null;
      }
    }

    public int getLowerBound() {
      return this.lowerBound;
    }

    public read4_args setLowerBound(int lowerBound) {
      this.lowerBound = lowerBound;
      setLowerBoundIsSet(true);
      return this;
    }

    public void unsetLowerBound() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOWERBOUND_ISSET_ID);
    }

    /** Returns true if field lowerBound is set (has been assigned a value) and false otherwise */
    public boolean isSetLowerBound() {
      return EncodingUtils.testBit(__isset_bitfield, __LOWERBOUND_ISSET_ID);
    }

    public void setLowerBoundIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOWERBOUND_ISSET_ID, value);
    }

    public int getUpperBound() {
      return this.upperBound;
    }

    public read4_args setUpperBound(int upperBound) {
      this.upperBound = upperBound;
      setUpperBoundIsSet(true);
      return this;
    }

    public void unsetUpperBound() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UPPERBOUND_ISSET_ID);
    }

    /** Returns true if field upperBound is set (has been assigned a value) and false otherwise */
    public boolean isSetUpperBound() {
      return EncodingUtils.testBit(__isset_bitfield, __UPPERBOUND_ISSET_ID);
    }

    public void setUpperBoundIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UPPERBOUND_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TABLE:
        if (value == null) {
          unsetTable();
        } else {
          setTable((String)value);
        }
        break;

      case KEY_PREFIX:
        if (value == null) {
          unsetKey_prefix();
        } else {
          setKey_prefix((String)value);
        }
        break;

      case PROJECTION_COLUMN:
        if (value == null) {
          unsetProjectionColumn();
        } else {
          setProjectionColumn((String)value);
        }
        break;

      case CONSTRAINT_COLUMN:
        if (value == null) {
          unsetConstraintColumn();
        } else {
          setConstraintColumn((String)value);
        }
        break;

      case LOWER_BOUND:
        if (value == null) {
          unsetLowerBound();
        } else {
          setLowerBound((Integer)value);
        }
        break;

      case UPPER_BOUND:
        if (value == null) {
          unsetUpperBound();
        } else {
          setUpperBound((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TABLE:
        return getTable();

      case KEY_PREFIX:
        return getKey_prefix();

      case PROJECTION_COLUMN:
        return getProjectionColumn();

      case CONSTRAINT_COLUMN:
        return getConstraintColumn();

      case LOWER_BOUND:
        return Integer.valueOf(getLowerBound());

      case UPPER_BOUND:
        return Integer.valueOf(getUpperBound());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TABLE:
        return isSetTable();
      case KEY_PREFIX:
        return isSetKey_prefix();
      case PROJECTION_COLUMN:
        return isSetProjectionColumn();
      case CONSTRAINT_COLUMN:
        return isSetConstraintColumn();
      case LOWER_BOUND:
        return isSetLowerBound();
      case UPPER_BOUND:
        return isSetUpperBound();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof read4_args)
        return this.equals((read4_args)that);
      return false;
    }

    public boolean equals(read4_args that) {
      if (that == null)
        return false;

      boolean this_present_table = true && this.isSetTable();
      boolean that_present_table = true && that.isSetTable();
      if (this_present_table || that_present_table) {
        if (!(this_present_table && that_present_table))
          return false;
        if (!this.table.equals(that.table))
          return false;
      }

      boolean this_present_key_prefix = true && this.isSetKey_prefix();
      boolean that_present_key_prefix = true && that.isSetKey_prefix();
      if (this_present_key_prefix || that_present_key_prefix) {
        if (!(this_present_key_prefix && that_present_key_prefix))
          return false;
        if (!this.key_prefix.equals(that.key_prefix))
          return false;
      }

      boolean this_present_projectionColumn = true && this.isSetProjectionColumn();
      boolean that_present_projectionColumn = true && that.isSetProjectionColumn();
      if (this_present_projectionColumn || that_present_projectionColumn) {
        if (!(this_present_projectionColumn && that_present_projectionColumn))
          return false;
        if (!this.projectionColumn.equals(that.projectionColumn))
          return false;
      }

      boolean this_present_constraintColumn = true && this.isSetConstraintColumn();
      boolean that_present_constraintColumn = true && that.isSetConstraintColumn();
      if (this_present_constraintColumn || that_present_constraintColumn) {
        if (!(this_present_constraintColumn && that_present_constraintColumn))
          return false;
        if (!this.constraintColumn.equals(that.constraintColumn))
          return false;
      }

      boolean this_present_lowerBound = true;
      boolean that_present_lowerBound = true;
      if (this_present_lowerBound || that_present_lowerBound) {
        if (!(this_present_lowerBound && that_present_lowerBound))
          return false;
        if (this.lowerBound != that.lowerBound)
          return false;
      }

      boolean this_present_upperBound = true;
      boolean that_present_upperBound = true;
      if (this_present_upperBound || that_present_upperBound) {
        if (!(this_present_upperBound && that_present_upperBound))
          return false;
        if (this.upperBound != that.upperBound)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(read4_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTable()).compareTo(other.isSetTable());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTable()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table, other.table);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetKey_prefix()).compareTo(other.isSetKey_prefix());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKey_prefix()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.key_prefix, other.key_prefix);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetProjectionColumn()).compareTo(other.isSetProjectionColumn());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProjectionColumn()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectionColumn, other.projectionColumn);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetConstraintColumn()).compareTo(other.isSetConstraintColumn());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetConstraintColumn()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.constraintColumn, other.constraintColumn);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLowerBound()).compareTo(other.isSetLowerBound());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLowerBound()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lowerBound, other.lowerBound);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUpperBound()).compareTo(other.isSetUpperBound());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUpperBound()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.upperBound, other.upperBound);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("read4_args(");
      boolean first = true;

      sb.append("table:");
      if (this.table == null) {
        sb.append("null");
      } else {
        sb.append(this.table);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("key_prefix:");
      if (this.key_prefix == null) {
        sb.append("null");
      } else {
        sb.append(this.key_prefix);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("projectionColumn:");
      if (this.projectionColumn == null) {
        sb.append("null");
      } else {
        sb.append(this.projectionColumn);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("constraintColumn:");
      if (this.constraintColumn == null) {
        sb.append("null");
      } else {
        sb.append(this.constraintColumn);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("lowerBound:");
      sb.append(this.lowerBound);
      first = false;
      if (!first) sb.append(", ");
      sb.append("upperBound:");
      sb.append(this.upperBound);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class read4_argsStandardSchemeFactory implements SchemeFactory {
      public read4_argsStandardScheme getScheme() {
        return new read4_argsStandardScheme();
      }
    }

    private static class read4_argsStandardScheme extends StandardScheme<read4_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, read4_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TABLE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.table = iprot.readString();
                struct.setTableIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // KEY_PREFIX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.key_prefix = iprot.readString();
                struct.setKey_prefixIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PROJECTION_COLUMN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.projectionColumn = iprot.readString();
                struct.setProjectionColumnIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // CONSTRAINT_COLUMN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.constraintColumn = iprot.readString();
                struct.setConstraintColumnIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // LOWER_BOUND
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.lowerBound = iprot.readI32();
                struct.setLowerBoundIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // UPPER_BOUND
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.upperBound = iprot.readI32();
                struct.setUpperBoundIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, read4_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.table != null) {
          oprot.writeFieldBegin(TABLE_FIELD_DESC);
          oprot.writeString(struct.table);
          oprot.writeFieldEnd();
        }
        if (struct.key_prefix != null) {
          oprot.writeFieldBegin(KEY_PREFIX_FIELD_DESC);
          oprot.writeString(struct.key_prefix);
          oprot.writeFieldEnd();
        }
        if (struct.projectionColumn != null) {
          oprot.writeFieldBegin(PROJECTION_COLUMN_FIELD_DESC);
          oprot.writeString(struct.projectionColumn);
          oprot.writeFieldEnd();
        }
        if (struct.constraintColumn != null) {
          oprot.writeFieldBegin(CONSTRAINT_COLUMN_FIELD_DESC);
          oprot.writeString(struct.constraintColumn);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(LOWER_BOUND_FIELD_DESC);
        oprot.writeI32(struct.lowerBound);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(UPPER_BOUND_FIELD_DESC);
        oprot.writeI32(struct.upperBound);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class read4_argsTupleSchemeFactory implements SchemeFactory {
      public read4_argsTupleScheme getScheme() {
        return new read4_argsTupleScheme();
      }
    }

    private static class read4_argsTupleScheme extends TupleScheme<read4_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, read4_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTable()) {
          optionals.set(0);
        }
        if (struct.isSetKey_prefix()) {
          optionals.set(1);
        }
        if (struct.isSetProjectionColumn()) {
          optionals.set(2);
        }
        if (struct.isSetConstraintColumn()) {
          optionals.set(3);
        }
        if (struct.isSetLowerBound()) {
          optionals.set(4);
        }
        if (struct.isSetUpperBound()) {
          optionals.set(5);
        }
        oprot.writeBitSet(optionals, 6);
        if (struct.isSetTable()) {
          oprot.writeString(struct.table);
        }
        if (struct.isSetKey_prefix()) {
          oprot.writeString(struct.key_prefix);
        }
        if (struct.isSetProjectionColumn()) {
          oprot.writeString(struct.projectionColumn);
        }
        if (struct.isSetConstraintColumn()) {
          oprot.writeString(struct.constraintColumn);
        }
        if (struct.isSetLowerBound()) {
          oprot.writeI32(struct.lowerBound);
        }
        if (struct.isSetUpperBound()) {
          oprot.writeI32(struct.upperBound);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, read4_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(6);
        if (incoming.get(0)) {
          struct.table = iprot.readString();
          struct.setTableIsSet(true);
        }
        if (incoming.get(1)) {
          struct.key_prefix = iprot.readString();
          struct.setKey_prefixIsSet(true);
        }
        if (incoming.get(2)) {
          struct.projectionColumn = iprot.readString();
          struct.setProjectionColumnIsSet(true);
        }
        if (incoming.get(3)) {
          struct.constraintColumn = iprot.readString();
          struct.setConstraintColumnIsSet(true);
        }
        if (incoming.get(4)) {
          struct.lowerBound = iprot.readI32();
          struct.setLowerBoundIsSet(true);
        }
        if (incoming.get(5)) {
          struct.upperBound = iprot.readI32();
          struct.setUpperBoundIsSet(true);
        }
      }
    }

  }

  public static class read4_result implements org.apache.thrift.TBase<read4_result, read4_result._Fields>, java.io.Serializable, Cloneable, Comparable<read4_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("read4_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new read4_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new read4_resultTupleSchemeFactory());
    }

    public List<edu.ucsb.cs.mdcc.messaging.ReadValue> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, edu.ucsb.cs.mdcc.messaging.ReadValue.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(read4_result.class, metaDataMap);
    }

    public read4_result() {
    }

    public read4_result(
      List<edu.ucsb.cs.mdcc.messaging.ReadValue> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public read4_result(read4_result other) {
      if (other.isSetSuccess()) {
        List<edu.ucsb.cs.mdcc.messaging.ReadValue> __this__success = new ArrayList<edu.ucsb.cs.mdcc.messaging.ReadValue>(other.success.size());
        for (edu.ucsb.cs.mdcc.messaging.ReadValue other_element : other.success) {
          __this__success.add(new edu.ucsb.cs.mdcc.messaging.ReadValue(other_element));
        }
        this.success = __this__success;
      }
    }

    public read4_result deepCopy() {
      return new read4_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<edu.ucsb.cs.mdcc.messaging.ReadValue> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(edu.ucsb.cs.mdcc.messaging.ReadValue elem) {
      if (this.success == null) {
        this.success = new ArrayList<edu.ucsb.cs.mdcc.messaging.ReadValue>();
      }
      this.success.add(elem);
    }

    public List<edu.ucsb.cs.mdcc.messaging.ReadValue> getSuccess() {
      return this.success;
    }

    public read4_result setSuccess(List<edu.ucsb.cs.mdcc.messaging.ReadValue> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<edu.ucsb.cs.mdcc.messaging.ReadValue>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof read4_result)
        return this.equals((read4_result)that);
      return false;
    }

    public boolean equals(read4_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(read4_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("read4_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class read4_resultStandardSchemeFactory implements SchemeFactory {
      public read4_resultStandardScheme getScheme() {
        return new read4_resultStandardScheme();
      }
    }

    private static class read4_resultStandardScheme extends StandardScheme<read4_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, read4_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list44 = iprot.readListBegin();
                  struct.success = new ArrayList<edu.ucsb.cs.mdcc.messaging.ReadValue>(_list44.size);
                  for (int _i45 = 0; _i45 < _list44.size; ++_i45)
                  {
                    edu.ucsb.cs.mdcc.messaging.ReadValue _elem46;
                    _elem46 = new edu.ucsb.cs.mdcc.messaging.ReadValue();
                    _elem46.read(iprot);
                    struct.success.add(_elem46);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, read4_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (edu.ucsb.cs.mdcc.messaging.ReadValue _iter47 : struct.success)
            {
              _iter47.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class read4_resultTupleSchemeFactory implements SchemeFactory {
      public read4_resultTupleScheme getScheme() {
        return new read4_resultTupleScheme();
      }
    }

    private static class read4_resultTupleScheme extends TupleScheme<read4_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, read4_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (edu.ucsb.cs.mdcc.messaging.ReadValue _iter48 : struct.success)
            {
              _iter48.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, read4_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list49 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<edu.ucsb.cs.mdcc.messaging.ReadValue>(_list49.size);
            for (int _i50 = 0; _i50 < _list49.size; ++_i50)
            {
              edu.ucsb.cs.mdcc.messaging.ReadValue _elem51;
              _elem51 = new edu.ucsb.cs.mdcc.messaging.ReadValue();
              _elem51.read(iprot);
              struct.success.add(_elem51);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class read5_args implements org.apache.thrift.TBase<read5_args, read5_args._Fields>, java.io.Serializable, Cloneable, Comparable<read5_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("read5_args");

    private static final org.apache.thrift.protocol.TField TABLE_FIELD_DESC = new org.apache.thrift.protocol.TField("table", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField KEY_PREFIX_FIELD_DESC = new org.apache.thrift.protocol.TField("key_prefix", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField CONSTRAINT_COLUMN_FIELD_DESC = new org.apache.thrift.protocol.TField("constraintColumn", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField LOWER_BOUND_FIELD_DESC = new org.apache.thrift.protocol.TField("lowerBound", org.apache.thrift.protocol.TType.I32, (short)4);
    private static final org.apache.thrift.protocol.TField UPPER_BOUND_FIELD_DESC = new org.apache.thrift.protocol.TField("upperBound", org.apache.thrift.protocol.TType.I32, (short)5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new read5_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new read5_argsTupleSchemeFactory());
    }

    public String table; // required
    public String key_prefix; // required
    public String constraintColumn; // required
    public int lowerBound; // required
    public int upperBound; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TABLE((short)1, "table"),
      KEY_PREFIX((short)2, "key_prefix"),
      CONSTRAINT_COLUMN((short)3, "constraintColumn"),
      LOWER_BOUND((short)4, "lowerBound"),
      UPPER_BOUND((short)5, "upperBound");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TABLE
            return TABLE;
          case 2: // KEY_PREFIX
            return KEY_PREFIX;
          case 3: // CONSTRAINT_COLUMN
            return CONSTRAINT_COLUMN;
          case 4: // LOWER_BOUND
            return LOWER_BOUND;
          case 5: // UPPER_BOUND
            return UPPER_BOUND;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __LOWERBOUND_ISSET_ID = 0;
    private static final int __UPPERBOUND_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TABLE, new org.apache.thrift.meta_data.FieldMetaData("table", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.KEY_PREFIX, new org.apache.thrift.meta_data.FieldMetaData("key_prefix", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CONSTRAINT_COLUMN, new org.apache.thrift.meta_data.FieldMetaData("constraintColumn", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.LOWER_BOUND, new org.apache.thrift.meta_data.FieldMetaData("lowerBound", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.UPPER_BOUND, new org.apache.thrift.meta_data.FieldMetaData("upperBound", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(read5_args.class, metaDataMap);
    }

    public read5_args() {
    }

    public read5_args(
      String table,
      String key_prefix,
      String constraintColumn,
      int lowerBound,
      int upperBound)
    {
      this();
      this.table = table;
      this.key_prefix = key_prefix;
      this.constraintColumn = constraintColumn;
      this.lowerBound = lowerBound;
      setLowerBoundIsSet(true);
      this.upperBound = upperBound;
      setUpperBoundIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public read5_args(read5_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetTable()) {
        this.table = other.table;
      }
      if (other.isSetKey_prefix()) {
        this.key_prefix = other.key_prefix;
      }
      if (other.isSetConstraintColumn()) {
        this.constraintColumn = other.constraintColumn;
      }
      this.lowerBound = other.lowerBound;
      this.upperBound = other.upperBound;
    }

    public read5_args deepCopy() {
      return new read5_args(this);
    }

    @Override
    public void clear() {
      this.table = null;
      this.key_prefix = null;
      this.constraintColumn = null;
      setLowerBoundIsSet(false);
      this.lowerBound = 0;
      setUpperBoundIsSet(false);
      this.upperBound = 0;
    }

    public String getTable() {
      return this.table;
    }

    public read5_args setTable(String table) {
      this.table = table;
      return this;
    }

    public void unsetTable() {
      this.table = null;
    }

    /** Returns true if field table is set (has been assigned a value) and false otherwise */
    public boolean isSetTable() {
      return this.table != null;
    }

    public void setTableIsSet(boolean value) {
      if (!value) {
        this.table = null;
      }
    }

    public String getKey_prefix() {
      return this.key_prefix;
    }

    public read5_args setKey_prefix(String key_prefix) {
      this.key_prefix = key_prefix;
      return this;
    }

    public void unsetKey_prefix() {
      this.key_prefix = null;
    }

    /** Returns true if field key_prefix is set (has been assigned a value) and false otherwise */
    public boolean isSetKey_prefix() {
      return this.key_prefix != null;
    }

    public void setKey_prefixIsSet(boolean value) {
      if (!value) {
        this.key_prefix = null;
      }
    }

    public String getConstraintColumn() {
      return this.constraintColumn;
    }

    public read5_args setConstraintColumn(String constraintColumn) {
      this.constraintColumn = constraintColumn;
      return this;
    }

    public void unsetConstraintColumn() {
      this.constraintColumn = null;
    }

    /** Returns true if field constraintColumn is set (has been assigned a value) and false otherwise */
    public boolean isSetConstraintColumn() {
      return this.constraintColumn != null;
    }

    public void setConstraintColumnIsSet(boolean value) {
      if (!value) {
        this.constraintColumn = null;
      }
    }

    public int getLowerBound() {
      return this.lowerBound;
    }

    public read5_args setLowerBound(int lowerBound) {
      this.lowerBound = lowerBound;
      setLowerBoundIsSet(true);
      return this;
    }

    public void unsetLowerBound() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOWERBOUND_ISSET_ID);
    }

    /** Returns true if field lowerBound is set (has been assigned a value) and false otherwise */
    public boolean isSetLowerBound() {
      return EncodingUtils.testBit(__isset_bitfield, __LOWERBOUND_ISSET_ID);
    }

    public void setLowerBoundIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOWERBOUND_ISSET_ID, value);
    }

    public int getUpperBound() {
      return this.upperBound;
    }

    public read5_args setUpperBound(int upperBound) {
      this.upperBound = upperBound;
      setUpperBoundIsSet(true);
      return this;
    }

    public void unsetUpperBound() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UPPERBOUND_ISSET_ID);
    }

    /** Returns true if field upperBound is set (has been assigned a value) and false otherwise */
    public boolean isSetUpperBound() {
      return EncodingUtils.testBit(__isset_bitfield, __UPPERBOUND_ISSET_ID);
    }

    public void setUpperBoundIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UPPERBOUND_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TABLE:
        if (value == null) {
          unsetTable();
        } else {
          setTable((String)value);
        }
        break;

      case KEY_PREFIX:
        if (value == null) {
          unsetKey_prefix();
        } else {
          setKey_prefix((String)value);
        }
        break;

      case CONSTRAINT_COLUMN:
        if (value == null) {
          unsetConstraintColumn();
        } else {
          setConstraintColumn((String)value);
        }
        break;

      case LOWER_BOUND:
        if (value == null) {
          unsetLowerBound();
        } else {
          setLowerBound((Integer)value);
        }
        break;

      case UPPER_BOUND:
        if (value == null) {
          unsetUpperBound();
        } else {
          setUpperBound((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TABLE:
        return getTable();

      case KEY_PREFIX:
        return getKey_prefix();

      case CONSTRAINT_COLUMN:
        return getConstraintColumn();

      case LOWER_BOUND:
        return Integer.valueOf(getLowerBound());

      case UPPER_BOUND:
        return Integer.valueOf(getUpperBound());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TABLE:
        return isSetTable();
      case KEY_PREFIX:
        return isSetKey_prefix();
      case CONSTRAINT_COLUMN:
        return isSetConstraintColumn();
      case LOWER_BOUND:
        return isSetLowerBound();
      case UPPER_BOUND:
        return isSetUpperBound();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof read5_args)
        return this.equals((read5_args)that);
      return false;
    }

    public boolean equals(read5_args that) {
      if (that == null)
        return false;

      boolean this_present_table = true && this.isSetTable();
      boolean that_present_table = true && that.isSetTable();
      if (this_present_table || that_present_table) {
        if (!(this_present_table && that_present_table))
          return false;
        if (!this.table.equals(that.table))
          return false;
      }

      boolean this_present_key_prefix = true && this.isSetKey_prefix();
      boolean that_present_key_prefix = true && that.isSetKey_prefix();
      if (this_present_key_prefix || that_present_key_prefix) {
        if (!(this_present_key_prefix && that_present_key_prefix))
          return false;
        if (!this.key_prefix.equals(that.key_prefix))
          return false;
      }

      boolean this_present_constraintColumn = true && this.isSetConstraintColumn();
      boolean that_present_constraintColumn = true && that.isSetConstraintColumn();
      if (this_present_constraintColumn || that_present_constraintColumn) {
        if (!(this_present_constraintColumn && that_present_constraintColumn))
          return false;
        if (!this.constraintColumn.equals(that.constraintColumn))
          return false;
      }

      boolean this_present_lowerBound = true;
      boolean that_present_lowerBound = true;
      if (this_present_lowerBound || that_present_lowerBound) {
        if (!(this_present_lowerBound && that_present_lowerBound))
          return false;
        if (this.lowerBound != that.lowerBound)
          return false;
      }

      boolean this_present_upperBound = true;
      boolean that_present_upperBound = true;
      if (this_present_upperBound || that_present_upperBound) {
        if (!(this_present_upperBound && that_present_upperBound))
          return false;
        if (this.upperBound != that.upperBound)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(read5_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTable()).compareTo(other.isSetTable());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTable()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table, other.table);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetKey_prefix()).compareTo(other.isSetKey_prefix());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKey_prefix()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.key_prefix, other.key_prefix);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetConstraintColumn()).compareTo(other.isSetConstraintColumn());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetConstraintColumn()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.constraintColumn, other.constraintColumn);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLowerBound()).compareTo(other.isSetLowerBound());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLowerBound()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lowerBound, other.lowerBound);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUpperBound()).compareTo(other.isSetUpperBound());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUpperBound()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.upperBound, other.upperBound);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("read5_args(");
      boolean first = true;

      sb.append("table:");
      if (this.table == null) {
        sb.append("null");
      } else {
        sb.append(this.table);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("key_prefix:");
      if (this.key_prefix == null) {
        sb.append("null");
      } else {
        sb.append(this.key_prefix);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("constraintColumn:");
      if (this.constraintColumn == null) {
        sb.append("null");
      } else {
        sb.append(this.constraintColumn);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("lowerBound:");
      sb.append(this.lowerBound);
      first = false;
      if (!first) sb.append(", ");
      sb.append("upperBound:");
      sb.append(this.upperBound);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class read5_argsStandardSchemeFactory implements SchemeFactory {
      public read5_argsStandardScheme getScheme() {
        return new read5_argsStandardScheme();
      }
    }

    private static class read5_argsStandardScheme extends StandardScheme<read5_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, read5_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TABLE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.table = iprot.readString();
                struct.setTableIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // KEY_PREFIX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.key_prefix = iprot.readString();
                struct.setKey_prefixIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // CONSTRAINT_COLUMN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.constraintColumn = iprot.readString();
                struct.setConstraintColumnIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // LOWER_BOUND
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.lowerBound = iprot.readI32();
                struct.setLowerBoundIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // UPPER_BOUND
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.upperBound = iprot.readI32();
                struct.setUpperBoundIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, read5_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.table != null) {
          oprot.writeFieldBegin(TABLE_FIELD_DESC);
          oprot.writeString(struct.table);
          oprot.writeFieldEnd();
        }
        if (struct.key_prefix != null) {
          oprot.writeFieldBegin(KEY_PREFIX_FIELD_DESC);
          oprot.writeString(struct.key_prefix);
          oprot.writeFieldEnd();
        }
        if (struct.constraintColumn != null) {
          oprot.writeFieldBegin(CONSTRAINT_COLUMN_FIELD_DESC);
          oprot.writeString(struct.constraintColumn);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(LOWER_BOUND_FIELD_DESC);
        oprot.writeI32(struct.lowerBound);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(UPPER_BOUND_FIELD_DESC);
        oprot.writeI32(struct.upperBound);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class read5_argsTupleSchemeFactory implements SchemeFactory {
      public read5_argsTupleScheme getScheme() {
        return new read5_argsTupleScheme();
      }
    }

    private static class read5_argsTupleScheme extends TupleScheme<read5_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, read5_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTable()) {
          optionals.set(0);
        }
        if (struct.isSetKey_prefix()) {
          optionals.set(1);
        }
        if (struct.isSetConstraintColumn()) {
          optionals.set(2);
        }
        if (struct.isSetLowerBound()) {
          optionals.set(3);
        }
        if (struct.isSetUpperBound()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetTable()) {
          oprot.writeString(struct.table);
        }
        if (struct.isSetKey_prefix()) {
          oprot.writeString(struct.key_prefix);
        }
        if (struct.isSetConstraintColumn()) {
          oprot.writeString(struct.constraintColumn);
        }
        if (struct.isSetLowerBound()) {
          oprot.writeI32(struct.lowerBound);
        }
        if (struct.isSetUpperBound()) {
          oprot.writeI32(struct.upperBound);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, read5_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.table = iprot.readString();
          struct.setTableIsSet(true);
        }
        if (incoming.get(1)) {
          struct.key_prefix = iprot.readString();
          struct.setKey_prefixIsSet(true);
        }
        if (incoming.get(2)) {
          struct.constraintColumn = iprot.readString();
          struct.setConstraintColumnIsSet(true);
        }
        if (incoming.get(3)) {
          struct.lowerBound = iprot.readI32();
          struct.setLowerBoundIsSet(true);
        }
        if (incoming.get(4)) {
          struct.upperBound = iprot.readI32();
          struct.setUpperBoundIsSet(true);
        }
      }
    }

  }

  public static class read5_result implements org.apache.thrift.TBase<read5_result, read5_result._Fields>, java.io.Serializable, Cloneable, Comparable<read5_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("read5_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new read5_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new read5_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(read5_result.class, metaDataMap);
    }

    public read5_result() {
    }

    public read5_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public read5_result(read5_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public read5_result deepCopy() {
      return new read5_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public read5_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof read5_result)
        return this.equals((read5_result)that);
      return false;
    }

    public boolean equals(read5_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(read5_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("read5_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class read5_resultStandardSchemeFactory implements SchemeFactory {
      public read5_resultStandardScheme getScheme() {
        return new read5_resultStandardScheme();
      }
    }

    private static class read5_resultStandardScheme extends StandardScheme<read5_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, read5_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, read5_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class read5_resultTupleSchemeFactory implements SchemeFactory {
      public read5_resultTupleScheme getScheme() {
        return new read5_resultTupleScheme();
      }
    }

    private static class read5_resultTupleScheme extends TupleScheme<read5_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, read5_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, read5_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class commit_args implements org.apache.thrift.TBase<commit_args, commit_args._Fields>, java.io.Serializable, Cloneable, Comparable<commit_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("commit_args");

    private static final org.apache.thrift.protocol.TField TRANSACTION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("transactionId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField OPTIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("options", org.apache.thrift.protocol.TType.LIST, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new commit_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new commit_argsTupleSchemeFactory());
    }

    public String transactionId; // required
    public List<edu.ucsb.cs.mdcc.messaging.Option> options; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TRANSACTION_ID((short)1, "transactionId"),
      OPTIONS((short)2, "options");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TRANSACTION_ID
            return TRANSACTION_ID;
          case 2: // OPTIONS
            return OPTIONS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TRANSACTION_ID, new org.apache.thrift.meta_data.FieldMetaData("transactionId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.OPTIONS, new org.apache.thrift.meta_data.FieldMetaData("options", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, edu.ucsb.cs.mdcc.messaging.Option.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(commit_args.class, metaDataMap);
    }

    public commit_args() {
    }

    public commit_args(
      String transactionId,
      List<edu.ucsb.cs.mdcc.messaging.Option> options)
    {
      this();
      this.transactionId = transactionId;
      this.options = options;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public commit_args(commit_args other) {
      if (other.isSetTransactionId()) {
        this.transactionId = other.transactionId;
      }
      if (other.isSetOptions()) {
        List<edu.ucsb.cs.mdcc.messaging.Option> __this__options = new ArrayList<edu.ucsb.cs.mdcc.messaging.Option>(other.options.size());
        for (edu.ucsb.cs.mdcc.messaging.Option other_element : other.options) {
          __this__options.add(new edu.ucsb.cs.mdcc.messaging.Option(other_element));
        }
        this.options = __this__options;
      }
    }

    public commit_args deepCopy() {
      return new commit_args(this);
    }

    @Override
    public void clear() {
      this.transactionId = null;
      this.options = null;
    }

    public String getTransactionId() {
      return this.transactionId;
    }

    public commit_args setTransactionId(String transactionId) {
      this.transactionId = transactionId;
      return this;
    }

    public void unsetTransactionId() {
      this.transactionId = null;
    }

    /** Returns true if field transactionId is set (has been assigned a value) and false otherwise */
    public boolean isSetTransactionId() {
      return this.transactionId != null;
    }

    public void setTransactionIdIsSet(boolean value) {
      if (!value) {
        this.transactionId = null;
      }
    }

    public int getOptionsSize() {
      return (this.options == null) ? 0 : this.options.size();
    }

    public java.util.Iterator<edu.ucsb.cs.mdcc.messaging.Option> getOptionsIterator() {
      return (this.options == null) ? null : this.options.iterator();
    }

    public void addToOptions(edu.ucsb.cs.mdcc.messaging.Option elem) {
      if (this.options == null) {
        this.options = new ArrayList<edu.ucsb.cs.mdcc.messaging.Option>();
      }
      this.options.add(elem);
    }

    public List<edu.ucsb.cs.mdcc.messaging.Option> getOptions() {
      return this.options;
    }

    public commit_args setOptions(List<edu.ucsb.cs.mdcc.messaging.Option> options) {
      this.options = options;
      return this;
    }

    public void unsetOptions() {
      this.options = null;
    }

    /** Returns true if field options is set (has been assigned a value) and false otherwise */
    public boolean isSetOptions() {
      return this.options != null;
    }

    public void setOptionsIsSet(boolean value) {
      if (!value) {
        this.options = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TRANSACTION_ID:
        if (value == null) {
          unsetTransactionId();
        } else {
          setTransactionId((String)value);
        }
        break;

      case OPTIONS:
        if (value == null) {
          unsetOptions();
        } else {
          setOptions((List<edu.ucsb.cs.mdcc.messaging.Option>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TRANSACTION_ID:
        return getTransactionId();

      case OPTIONS:
        return getOptions();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TRANSACTION_ID:
        return isSetTransactionId();
      case OPTIONS:
        return isSetOptions();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof commit_args)
        return this.equals((commit_args)that);
      return false;
    }

    public boolean equals(commit_args that) {
      if (that == null)
        return false;

      boolean this_present_transactionId = true && this.isSetTransactionId();
      boolean that_present_transactionId = true && that.isSetTransactionId();
      if (this_present_transactionId || that_present_transactionId) {
        if (!(this_present_transactionId && that_present_transactionId))
          return false;
        if (!this.transactionId.equals(that.transactionId))
          return false;
      }

      boolean this_present_options = true && this.isSetOptions();
      boolean that_present_options = true && that.isSetOptions();
      if (this_present_options || that_present_options) {
        if (!(this_present_options && that_present_options))
          return false;
        if (!this.options.equals(that.options))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(commit_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTransactionId()).compareTo(other.isSetTransactionId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTransactionId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.transactionId, other.transactionId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOptions()).compareTo(other.isSetOptions());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOptions()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.options, other.options);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("commit_args(");
      boolean first = true;

      sb.append("transactionId:");
      if (this.transactionId == null) {
        sb.append("null");
      } else {
        sb.append(this.transactionId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("options:");
      if (this.options == null) {
        sb.append("null");
      } else {
        sb.append(this.options);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class commit_argsStandardSchemeFactory implements SchemeFactory {
      public commit_argsStandardScheme getScheme() {
        return new commit_argsStandardScheme();
      }
    }

    private static class commit_argsStandardScheme extends StandardScheme<commit_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, commit_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TRANSACTION_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.transactionId = iprot.readString();
                struct.setTransactionIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // OPTIONS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list52 = iprot.readListBegin();
                  struct.options = new ArrayList<edu.ucsb.cs.mdcc.messaging.Option>(_list52.size);
                  for (int _i53 = 0; _i53 < _list52.size; ++_i53)
                  {
                    edu.ucsb.cs.mdcc.messaging.Option _elem54;
                    _elem54 = new edu.ucsb.cs.mdcc.messaging.Option();
                    _elem54.read(iprot);
                    struct.options.add(_elem54);
                  }
                  iprot.readListEnd();
                }
                struct.setOptionsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, commit_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.transactionId != null) {
          oprot.writeFieldBegin(TRANSACTION_ID_FIELD_DESC);
          oprot.writeString(struct.transactionId);
          oprot.writeFieldEnd();
        }
        if (struct.options != null) {
          oprot.writeFieldBegin(OPTIONS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.options.size()));
            for (edu.ucsb.cs.mdcc.messaging.Option _iter55 : struct.options)
            {
              _iter55.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class commit_argsTupleSchemeFactory implements SchemeFactory {
      public commit_argsTupleScheme getScheme() {
        return new commit_argsTupleScheme();
      }
    }

    private static class commit_argsTupleScheme extends TupleScheme<commit_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, commit_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTransactionId()) {
          optionals.set(0);
        }
        if (struct.isSetOptions()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetTransactionId()) {
          oprot.writeString(struct.transactionId);
        }
        if (struct.isSetOptions()) {
          {
            oprot.writeI32(struct.options.size());
            for (edu.ucsb.cs.mdcc.messaging.Option _iter56 : struct.options)
            {
              _iter56.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, commit_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.transactionId = iprot.readString();
          struct.setTransactionIdIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list57 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.options = new ArrayList<edu.ucsb.cs.mdcc.messaging.Option>(_list57.size);
            for (int _i58 = 0; _i58 < _list57.size; ++_i58)
            {
              edu.ucsb.cs.mdcc.messaging.Option _elem59;
              _elem59 = new edu.ucsb.cs.mdcc.messaging.Option();
              _elem59.read(iprot);
              struct.options.add(_elem59);
            }
          }
          struct.setOptionsIsSet(true);
        }
      }
    }

  }

  public static class commit_result implements org.apache.thrift.TBase<commit_result, commit_result._Fields>, java.io.Serializable, Cloneable, Comparable<commit_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("commit_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new commit_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new commit_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(commit_result.class, metaDataMap);
    }

    public commit_result() {
    }

    public commit_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public commit_result(commit_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public commit_result deepCopy() {
      return new commit_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public commit_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof commit_result)
        return this.equals((commit_result)that);
      return false;
    }

    public boolean equals(commit_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(commit_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("commit_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class commit_resultStandardSchemeFactory implements SchemeFactory {
      public commit_resultStandardScheme getScheme() {
        return new commit_resultStandardScheme();
      }
    }

    private static class commit_resultStandardScheme extends StandardScheme<commit_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, commit_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, commit_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class commit_resultTupleSchemeFactory implements SchemeFactory {
      public commit_resultTupleScheme getScheme() {
        return new commit_resultTupleScheme();
      }
    }

    private static class commit_resultTupleScheme extends TupleScheme<commit_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, commit_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, commit_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
